
GLCD_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002208  0000227c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000018b4  00000000  00000000  00002284  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b76  00000000  00000000  00003b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000046ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000480e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000499d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000069e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00007ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00008a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00008be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00008eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b8 10 	call	0x2170	; 0x2170 <main>
      7a:	0c 94 02 11 	jmp	0x2204	; 0x2204 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <GLCD_command>:
#include "util/delay.h"

#define FontWidth	128


void GLCD_command(uint8 command){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	e1 97       	sbiw	r28, 0x31	; 49
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 ab       	std	Y+49, r24	; 0x31
	GPIO_writePort(GLCD_DATA_PORT, command);
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	69 a9       	ldd	r22, Y+49	; 0x31
     ca8:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_writePort>
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_RS_PIN, LOGIC_LOW);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	63 e0       	ldi	r22, 0x03	; 3
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_R_W_PIN, LOGIC_LOW);
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	62 e0       	ldi	r22, 0x02	; 2
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_E_PIN, LOGIC_HIGH);
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a0 ea       	ldi	r26, 0xA0	; 160
     cd0:	b0 e4       	ldi	r27, 0x40	; 64
     cd2:	8d a7       	std	Y+45, r24	; 0x2d
     cd4:	9e a7       	std	Y+46, r25	; 0x2e
     cd6:	af a7       	std	Y+47, r26	; 0x2f
     cd8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     cda:	6d a5       	ldd	r22, Y+45	; 0x2d
     cdc:	7e a5       	ldd	r23, Y+46	; 0x2e
     cde:	8f a5       	ldd	r24, Y+47	; 0x2f
     ce0:	98 a9       	ldd	r25, Y+48	; 0x30
     ce2:	2b ea       	ldi	r18, 0xAB	; 171
     ce4:	3a ea       	ldi	r19, 0xAA	; 170
     ce6:	4a ea       	ldi	r20, 0xAA	; 170
     ce8:	50 e4       	ldi	r21, 0x40	; 64
     cea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	89 a7       	std	Y+41, r24	; 0x29
     cf4:	9a a7       	std	Y+42, r25	; 0x2a
     cf6:	ab a7       	std	Y+43, r26	; 0x2b
     cf8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     cfa:	69 a5       	ldd	r22, Y+41	; 0x29
     cfc:	7a a5       	ldd	r23, Y+42	; 0x2a
     cfe:	8b a5       	ldd	r24, Y+43	; 0x2b
     d00:	9c a5       	ldd	r25, Y+44	; 0x2c
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e8       	ldi	r20, 0x80	; 128
     d08:	5f e3       	ldi	r21, 0x3F	; 63
     d0a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d0e:	88 23       	and	r24, r24
     d10:	1c f4       	brge	.+6      	; 0xd18 <GLCD_command+0x8a>
		__ticks = 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	88 a7       	std	Y+40, r24	; 0x28
     d16:	91 c0       	rjmp	.+290    	; 0xe3a <GLCD_command+0x1ac>
	else if (__tmp > 255)
     d18:	69 a5       	ldd	r22, Y+41	; 0x29
     d1a:	7a a5       	ldd	r23, Y+42	; 0x2a
     d1c:	8b a5       	ldd	r24, Y+43	; 0x2b
     d1e:	9c a5       	ldd	r25, Y+44	; 0x2c
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	4f e7       	ldi	r20, 0x7F	; 127
     d26:	53 e4       	ldi	r21, 0x43	; 67
     d28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d2c:	18 16       	cp	r1, r24
     d2e:	0c f0       	brlt	.+2      	; 0xd32 <GLCD_command+0xa4>
     d30:	7b c0       	rjmp	.+246    	; 0xe28 <GLCD_command+0x19a>
	{
		_delay_ms(__us / 1000.0);
     d32:	6d a5       	ldd	r22, Y+45	; 0x2d
     d34:	7e a5       	ldd	r23, Y+46	; 0x2e
     d36:	8f a5       	ldd	r24, Y+47	; 0x2f
     d38:	98 a9       	ldd	r25, Y+48	; 0x30
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	4a e7       	ldi	r20, 0x7A	; 122
     d40:	54 e4       	ldi	r21, 0x44	; 68
     d42:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	8c a3       	std	Y+36, r24	; 0x24
     d4c:	9d a3       	std	Y+37, r25	; 0x25
     d4e:	ae a3       	std	Y+38, r26	; 0x26
     d50:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d52:	6c a1       	ldd	r22, Y+36	; 0x24
     d54:	7d a1       	ldd	r23, Y+37	; 0x25
     d56:	8e a1       	ldd	r24, Y+38	; 0x26
     d58:	9f a1       	ldd	r25, Y+39	; 0x27
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	4a e7       	ldi	r20, 0x7A	; 122
     d60:	55 e4       	ldi	r21, 0x45	; 69
     d62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	88 a3       	std	Y+32, r24	; 0x20
     d6c:	99 a3       	std	Y+33, r25	; 0x21
     d6e:	aa a3       	std	Y+34, r26	; 0x22
     d70:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     d72:	68 a1       	ldd	r22, Y+32	; 0x20
     d74:	79 a1       	ldd	r23, Y+33	; 0x21
     d76:	8a a1       	ldd	r24, Y+34	; 0x22
     d78:	9b a1       	ldd	r25, Y+35	; 0x23
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e8       	ldi	r20, 0x80	; 128
     d80:	5f e3       	ldi	r21, 0x3F	; 63
     d82:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d86:	88 23       	and	r24, r24
     d88:	2c f4       	brge	.+10     	; 0xd94 <GLCD_command+0x106>
		__ticks = 1;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9f 8f       	std	Y+31, r25	; 0x1f
     d90:	8e 8f       	std	Y+30, r24	; 0x1e
     d92:	3f c0       	rjmp	.+126    	; 0xe12 <GLCD_command+0x184>
	else if (__tmp > 65535)
     d94:	68 a1       	ldd	r22, Y+32	; 0x20
     d96:	79 a1       	ldd	r23, Y+33	; 0x21
     d98:	8a a1       	ldd	r24, Y+34	; 0x22
     d9a:	9b a1       	ldd	r25, Y+35	; 0x23
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	3f ef       	ldi	r19, 0xFF	; 255
     da0:	4f e7       	ldi	r20, 0x7F	; 127
     da2:	57 e4       	ldi	r21, 0x47	; 71
     da4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     da8:	18 16       	cp	r1, r24
     daa:	4c f5       	brge	.+82     	; 0xdfe <GLCD_command+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dac:	6c a1       	ldd	r22, Y+36	; 0x24
     dae:	7d a1       	ldd	r23, Y+37	; 0x25
     db0:	8e a1       	ldd	r24, Y+38	; 0x26
     db2:	9f a1       	ldd	r25, Y+39	; 0x27
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e2       	ldi	r20, 0x20	; 32
     dba:	51 e4       	ldi	r21, 0x41	; 65
     dbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	9f 8f       	std	Y+31, r25	; 0x1f
     dd2:	8e 8f       	std	Y+30, r24	; 0x1e
     dd4:	0f c0       	rjmp	.+30     	; 0xdf4 <GLCD_command+0x166>
     dd6:	80 e9       	ldi	r24, 0x90	; 144
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	9d 8f       	std	Y+29, r25	; 0x1d
     ddc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dde:	8c 8d       	ldd	r24, Y+28	; 0x1c
     de0:	9d 8d       	ldd	r25, Y+29	; 0x1d
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <GLCD_command+0x154>
     de6:	9d 8f       	std	Y+29, r25	; 0x1d
     de8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dea:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dec:	9f 8d       	ldd	r25, Y+31	; 0x1f
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	9f 8f       	std	Y+31, r25	; 0x1f
     df2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     df6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	69 f7       	brne	.-38     	; 0xdd6 <GLCD_command+0x148>
     dfc:	24 c0       	rjmp	.+72     	; 0xe46 <GLCD_command+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfe:	68 a1       	ldd	r22, Y+32	; 0x20
     e00:	79 a1       	ldd	r23, Y+33	; 0x21
     e02:	8a a1       	ldd	r24, Y+34	; 0x22
     e04:	9b a1       	ldd	r25, Y+35	; 0x23
     e06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	9f 8f       	std	Y+31, r25	; 0x1f
     e10:	8e 8f       	std	Y+30, r24	; 0x1e
     e12:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e14:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e16:	9b 8f       	std	Y+27, r25	; 0x1b
     e18:	8a 8f       	std	Y+26, r24	; 0x1a
     e1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <GLCD_command+0x190>
     e22:	9b 8f       	std	Y+27, r25	; 0x1b
     e24:	8a 8f       	std	Y+26, r24	; 0x1a
     e26:	0f c0       	rjmp	.+30     	; 0xe46 <GLCD_command+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e28:	69 a5       	ldd	r22, Y+41	; 0x29
     e2a:	7a a5       	ldd	r23, Y+42	; 0x2a
     e2c:	8b a5       	ldd	r24, Y+43	; 0x2b
     e2e:	9c a5       	ldd	r25, Y+44	; 0x2c
     e30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	88 a7       	std	Y+40, r24	; 0x28
     e3a:	88 a5       	ldd	r24, Y+40	; 0x28
     e3c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e3e:	89 8d       	ldd	r24, Y+25	; 0x19
     e40:	8a 95       	dec	r24
     e42:	f1 f7       	brne	.-4      	; 0xe40 <GLCD_command+0x1b2>
     e44:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_E_PIN, LOGIC_LOW);
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a0 ea       	ldi	r26, 0xA0	; 160
     e56:	b0 e4       	ldi	r27, 0x40	; 64
     e58:	8d 8b       	std	Y+21, r24	; 0x15
     e5a:	9e 8b       	std	Y+22, r25	; 0x16
     e5c:	af 8b       	std	Y+23, r26	; 0x17
     e5e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e60:	6d 89       	ldd	r22, Y+21	; 0x15
     e62:	7e 89       	ldd	r23, Y+22	; 0x16
     e64:	8f 89       	ldd	r24, Y+23	; 0x17
     e66:	98 8d       	ldd	r25, Y+24	; 0x18
     e68:	2b ea       	ldi	r18, 0xAB	; 171
     e6a:	3a ea       	ldi	r19, 0xAA	; 170
     e6c:	4a ea       	ldi	r20, 0xAA	; 170
     e6e:	50 e4       	ldi	r21, 0x40	; 64
     e70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	89 8b       	std	Y+17, r24	; 0x11
     e7a:	9a 8b       	std	Y+18, r25	; 0x12
     e7c:	ab 8b       	std	Y+19, r26	; 0x13
     e7e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     e80:	69 89       	ldd	r22, Y+17	; 0x11
     e82:	7a 89       	ldd	r23, Y+18	; 0x12
     e84:	8b 89       	ldd	r24, Y+19	; 0x13
     e86:	9c 89       	ldd	r25, Y+20	; 0x14
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e8       	ldi	r20, 0x80	; 128
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e94:	88 23       	and	r24, r24
     e96:	1c f4       	brge	.+6      	; 0xe9e <GLCD_command+0x210>
		__ticks = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	88 8b       	std	Y+16, r24	; 0x10
     e9c:	91 c0       	rjmp	.+290    	; 0xfc0 <GLCD_command+0x332>
	else if (__tmp > 255)
     e9e:	69 89       	ldd	r22, Y+17	; 0x11
     ea0:	7a 89       	ldd	r23, Y+18	; 0x12
     ea2:	8b 89       	ldd	r24, Y+19	; 0x13
     ea4:	9c 89       	ldd	r25, Y+20	; 0x14
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	4f e7       	ldi	r20, 0x7F	; 127
     eac:	53 e4       	ldi	r21, 0x43	; 67
     eae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     eb2:	18 16       	cp	r1, r24
     eb4:	0c f0       	brlt	.+2      	; 0xeb8 <GLCD_command+0x22a>
     eb6:	7b c0       	rjmp	.+246    	; 0xfae <GLCD_command+0x320>
	{
		_delay_ms(__us / 1000.0);
     eb8:	6d 89       	ldd	r22, Y+21	; 0x15
     eba:	7e 89       	ldd	r23, Y+22	; 0x16
     ebc:	8f 89       	ldd	r24, Y+23	; 0x17
     ebe:	98 8d       	ldd	r25, Y+24	; 0x18
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	4a e7       	ldi	r20, 0x7A	; 122
     ec6:	54 e4       	ldi	r21, 0x44	; 68
     ec8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	8c 87       	std	Y+12, r24	; 0x0c
     ed2:	9d 87       	std	Y+13, r25	; 0x0d
     ed4:	ae 87       	std	Y+14, r26	; 0x0e
     ed6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed8:	6c 85       	ldd	r22, Y+12	; 0x0c
     eda:	7d 85       	ldd	r23, Y+13	; 0x0d
     edc:	8e 85       	ldd	r24, Y+14	; 0x0e
     ede:	9f 85       	ldd	r25, Y+15	; 0x0f
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	4a e7       	ldi	r20, 0x7A	; 122
     ee6:	55 e4       	ldi	r21, 0x45	; 69
     ee8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	88 87       	std	Y+8, r24	; 0x08
     ef2:	99 87       	std	Y+9, r25	; 0x09
     ef4:	aa 87       	std	Y+10, r26	; 0x0a
     ef6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     ef8:	68 85       	ldd	r22, Y+8	; 0x08
     efa:	79 85       	ldd	r23, Y+9	; 0x09
     efc:	8a 85       	ldd	r24, Y+10	; 0x0a
     efe:	9b 85       	ldd	r25, Y+11	; 0x0b
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e8       	ldi	r20, 0x80	; 128
     f06:	5f e3       	ldi	r21, 0x3F	; 63
     f08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f0c:	88 23       	and	r24, r24
     f0e:	2c f4       	brge	.+10     	; 0xf1a <GLCD_command+0x28c>
		__ticks = 1;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	9f 83       	std	Y+7, r25	; 0x07
     f16:	8e 83       	std	Y+6, r24	; 0x06
     f18:	3f c0       	rjmp	.+126    	; 0xf98 <GLCD_command+0x30a>
	else if (__tmp > 65535)
     f1a:	68 85       	ldd	r22, Y+8	; 0x08
     f1c:	79 85       	ldd	r23, Y+9	; 0x09
     f1e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f20:	9b 85       	ldd	r25, Y+11	; 0x0b
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	3f ef       	ldi	r19, 0xFF	; 255
     f26:	4f e7       	ldi	r20, 0x7F	; 127
     f28:	57 e4       	ldi	r21, 0x47	; 71
     f2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f2e:	18 16       	cp	r1, r24
     f30:	4c f5       	brge	.+82     	; 0xf84 <GLCD_command+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f32:	6c 85       	ldd	r22, Y+12	; 0x0c
     f34:	7d 85       	ldd	r23, Y+13	; 0x0d
     f36:	8e 85       	ldd	r24, Y+14	; 0x0e
     f38:	9f 85       	ldd	r25, Y+15	; 0x0f
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e2       	ldi	r20, 0x20	; 32
     f40:	51 e4       	ldi	r21, 0x41	; 65
     f42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	bc 01       	movw	r22, r24
     f4c:	cd 01       	movw	r24, r26
     f4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	9f 83       	std	Y+7, r25	; 0x07
     f58:	8e 83       	std	Y+6, r24	; 0x06
     f5a:	0f c0       	rjmp	.+30     	; 0xf7a <GLCD_command+0x2ec>
     f5c:	80 e9       	ldi	r24, 0x90	; 144
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	9d 83       	std	Y+5, r25	; 0x05
     f62:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <GLCD_command+0x2da>
     f6c:	9d 83       	std	Y+5, r25	; 0x05
     f6e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f70:	8e 81       	ldd	r24, Y+6	; 0x06
     f72:	9f 81       	ldd	r25, Y+7	; 0x07
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	9f 83       	std	Y+7, r25	; 0x07
     f78:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7a:	8e 81       	ldd	r24, Y+6	; 0x06
     f7c:	9f 81       	ldd	r25, Y+7	; 0x07
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	69 f7       	brne	.-38     	; 0xf5c <GLCD_command+0x2ce>
     f82:	24 c0       	rjmp	.+72     	; 0xfcc <GLCD_command+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f84:	68 85       	ldd	r22, Y+8	; 0x08
     f86:	79 85       	ldd	r23, Y+9	; 0x09
     f88:	8a 85       	ldd	r24, Y+10	; 0x0a
     f8a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	9f 83       	std	Y+7, r25	; 0x07
     f96:	8e 83       	std	Y+6, r24	; 0x06
     f98:	8e 81       	ldd	r24, Y+6	; 0x06
     f9a:	9f 81       	ldd	r25, Y+7	; 0x07
     f9c:	9b 83       	std	Y+3, r25	; 0x03
     f9e:	8a 83       	std	Y+2, r24	; 0x02
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	9b 81       	ldd	r25, Y+3	; 0x03
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <GLCD_command+0x316>
     fa8:	9b 83       	std	Y+3, r25	; 0x03
     faa:	8a 83       	std	Y+2, r24	; 0x02
     fac:	0f c0       	rjmp	.+30     	; 0xfcc <GLCD_command+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fae:	69 89       	ldd	r22, Y+17	; 0x11
     fb0:	7a 89       	ldd	r23, Y+18	; 0x12
     fb2:	8b 89       	ldd	r24, Y+19	; 0x13
     fb4:	9c 89       	ldd	r25, Y+20	; 0x14
     fb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	88 8b       	std	Y+16, r24	; 0x10
     fc0:	88 89       	ldd	r24, Y+16	; 0x10
     fc2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	8a 95       	dec	r24
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <GLCD_command+0x338>
     fca:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
     fcc:	e1 96       	adiw	r28, 0x31	; 49
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <GLCD_init>:

void GLCD_init(){
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	2e 97       	sbiw	r28, 0x0e	; 14
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
	/* setting up the direction of data port to be output port */
	GPIO_setupPortDirection(GLCD_DATA_PORT, PIN_OUTPUT);
     ff2:	83 e0       	ldi	r24, 0x03	; 3
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <GPIO_setupPortDirection>
	/* turn it off at the beginning */
	GPIO_writePort(GLCD_DATA_PORT, LOGIC_LOW);
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_writePort>

	/* setting up the direction of control port to be output port */
	GPIO_setupPortDirection(GLCD_CONTROL_PORT, PIN_OUTPUT);
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <GPIO_setupPortDirection>

	/* turn it off at the beginning */
	GPIO_writePort(GLCD_CONTROL_PORT, LOGIC_LOW);
    100a:	82 e0       	ldi	r24, 0x02	; 2
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_writePort>

	/* CS1 = 1, CS2 = 1, RST = 1*/
	GLCD_selectPage(BOTH_PAGES);
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	0e 94 9b 08 	call	0x1136	; 0x1136 <GLCD_selectPage>
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_RST_PIN, LOGIC_HIGH);
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	41 e0       	ldi	r20, 0x01	; 1
    101e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	a0 ea       	ldi	r26, 0xA0	; 160
    1028:	b1 e4       	ldi	r27, 0x41	; 65
    102a:	8b 87       	std	Y+11, r24	; 0x0b
    102c:	9c 87       	std	Y+12, r25	; 0x0c
    102e:	ad 87       	std	Y+13, r26	; 0x0d
    1030:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1032:	6b 85       	ldd	r22, Y+11	; 0x0b
    1034:	7c 85       	ldd	r23, Y+12	; 0x0c
    1036:	8d 85       	ldd	r24, Y+13	; 0x0d
    1038:	9e 85       	ldd	r25, Y+14	; 0x0e
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	4a e7       	ldi	r20, 0x7A	; 122
    1040:	55 e4       	ldi	r21, 0x45	; 69
    1042:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	8f 83       	std	Y+7, r24	; 0x07
    104c:	98 87       	std	Y+8, r25	; 0x08
    104e:	a9 87       	std	Y+9, r26	; 0x09
    1050:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1052:	6f 81       	ldd	r22, Y+7	; 0x07
    1054:	78 85       	ldd	r23, Y+8	; 0x08
    1056:	89 85       	ldd	r24, Y+9	; 0x09
    1058:	9a 85       	ldd	r25, Y+10	; 0x0a
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e8       	ldi	r20, 0x80	; 128
    1060:	5f e3       	ldi	r21, 0x3F	; 63
    1062:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1066:	88 23       	and	r24, r24
    1068:	2c f4       	brge	.+10     	; 0x1074 <GLCD_init+0x96>
		__ticks = 1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9e 83       	std	Y+6, r25	; 0x06
    1070:	8d 83       	std	Y+5, r24	; 0x05
    1072:	3f c0       	rjmp	.+126    	; 0x10f2 <GLCD_init+0x114>
	else if (__tmp > 65535)
    1074:	6f 81       	ldd	r22, Y+7	; 0x07
    1076:	78 85       	ldd	r23, Y+8	; 0x08
    1078:	89 85       	ldd	r24, Y+9	; 0x09
    107a:	9a 85       	ldd	r25, Y+10	; 0x0a
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	3f ef       	ldi	r19, 0xFF	; 255
    1080:	4f e7       	ldi	r20, 0x7F	; 127
    1082:	57 e4       	ldi	r21, 0x47	; 71
    1084:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1088:	18 16       	cp	r1, r24
    108a:	4c f5       	brge	.+82     	; 0x10de <GLCD_init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108c:	6b 85       	ldd	r22, Y+11	; 0x0b
    108e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1090:	8d 85       	ldd	r24, Y+13	; 0x0d
    1092:	9e 85       	ldd	r25, Y+14	; 0x0e
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e2       	ldi	r20, 0x20	; 32
    109a:	51 e4       	ldi	r21, 0x41	; 65
    109c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	bc 01       	movw	r22, r24
    10a6:	cd 01       	movw	r24, r26
    10a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	8d 83       	std	Y+5, r24	; 0x05
    10b4:	0f c0       	rjmp	.+30     	; 0x10d4 <GLCD_init+0xf6>
    10b6:	80 e9       	ldi	r24, 0x90	; 144
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	9c 83       	std	Y+4, r25	; 0x04
    10bc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	9c 81       	ldd	r25, Y+4	; 0x04
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <GLCD_init+0xe4>
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	69 f7       	brne	.-38     	; 0x10b6 <GLCD_init+0xd8>
    10dc:	14 c0       	rjmp	.+40     	; 0x1106 <GLCD_init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10de:	6f 81       	ldd	r22, Y+7	; 0x07
    10e0:	78 85       	ldd	r23, Y+8	; 0x08
    10e2:	89 85       	ldd	r24, Y+9	; 0x09
    10e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	9e 83       	std	Y+6, r25	; 0x06
    10f0:	8d 83       	std	Y+5, r24	; 0x05
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	9a 83       	std	Y+2, r25	; 0x02
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <GLCD_init+0x120>
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
	GLCD_sendCommand(GLCD_SET_Y_ADDRESS, 0x40);
	GLCD_sendCommand(GLCD_SET_X_ADDRESS, 0xB8);
	GLCD_sendCommand(GLCD_SET_Z_ADDRESS, 0xC0);
	GLCD_sendCommand(GLCD_DISPLAY_ON, 0);*/

	GLCD_command(0x3E);		/* Display OFF */
    1106:	8e e3       	ldi	r24, 0x3E	; 62
    1108:	0e 94 47 06 	call	0xc8e	; 0xc8e <GLCD_command>
	GLCD_command(0x40);		/* Set Y address (column=0) */
    110c:	80 e4       	ldi	r24, 0x40	; 64
    110e:	0e 94 47 06 	call	0xc8e	; 0xc8e <GLCD_command>
	GLCD_command(0xB8);		/* Set x address (page=0) */
    1112:	88 eb       	ldi	r24, 0xB8	; 184
    1114:	0e 94 47 06 	call	0xc8e	; 0xc8e <GLCD_command>
	GLCD_command(0xC0);		/* Set z address (start line=0) */
    1118:	80 ec       	ldi	r24, 0xC0	; 192
    111a:	0e 94 47 06 	call	0xc8e	; 0xc8e <GLCD_command>
	GLCD_command(0x3F);		/* Display ON */
    111e:	8f e3       	ldi	r24, 0x3F	; 63
    1120:	0e 94 47 06 	call	0xc8e	; 0xc8e <GLCD_command>
}
    1124:	2e 96       	adiw	r28, 0x0e	; 14
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <GLCD_selectPage>:

void GLCD_selectPage(uint8 page){
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	0f 92       	push	r0
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	89 83       	std	Y+1, r24	; 0x01
	/* if right page is selected, then setting cs2 = 1, cs1 = 0 */
	/* if left page is selected, then setting cs2 = 0, cs1 = 1 */
	/* if both pages is selected, then setting cs2 = 1, cs1 = 1 */
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_CS2_PIN, GET_BIT(page,1));
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	82 70       	andi	r24, 0x02	; 2
    114a:	90 70       	andi	r25, 0x00	; 0
    114c:	95 95       	asr	r25
    114e:	87 95       	ror	r24
    1150:	98 2f       	mov	r25, r24
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	64 e0       	ldi	r22, 0x04	; 4
    1156:	49 2f       	mov	r20, r25
    1158:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_CS1_PIN, GET_BIT(page,0));
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	98 2f       	mov	r25, r24
    1160:	91 70       	andi	r25, 0x01	; 1
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	65 e0       	ldi	r22, 0x05	; 5
    1166:	49 2f       	mov	r20, r25
    1168:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
}
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <GLCD_sendCommand>:

void GLCD_sendCommand(uint16 command, uint8 data){
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	ed 97       	sbiw	r28, 0x3d	; 61
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	9a af       	std	Y+58, r25	; 0x3a
    118a:	89 af       	std	Y+57, r24	; 0x39
    118c:	6b af       	std	Y+59, r22	; 0x3b
	/* RS = 0, R/W = 0 */
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_RS_PIN, LOGIC_LOW);
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	63 e0       	ldi	r22, 0x03	; 3
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_R_W_PIN, LOGIC_LOW);
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	62 e0       	ldi	r22, 0x02	; 2
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a0 e8       	ldi	r26, 0x80	; 128
    11a8:	bf e3       	ldi	r27, 0x3F	; 63
    11aa:	8d ab       	std	Y+53, r24	; 0x35
    11ac:	9e ab       	std	Y+54, r25	; 0x36
    11ae:	af ab       	std	Y+55, r26	; 0x37
    11b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b2:	6d a9       	ldd	r22, Y+53	; 0x35
    11b4:	7e a9       	ldd	r23, Y+54	; 0x36
    11b6:	8f a9       	ldd	r24, Y+55	; 0x37
    11b8:	98 ad       	ldd	r25, Y+56	; 0x38
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	4a e7       	ldi	r20, 0x7A	; 122
    11c0:	55 e4       	ldi	r21, 0x45	; 69
    11c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	89 ab       	std	Y+49, r24	; 0x31
    11cc:	9a ab       	std	Y+50, r25	; 0x32
    11ce:	ab ab       	std	Y+51, r26	; 0x33
    11d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11d2:	69 a9       	ldd	r22, Y+49	; 0x31
    11d4:	7a a9       	ldd	r23, Y+50	; 0x32
    11d6:	8b a9       	ldd	r24, Y+51	; 0x33
    11d8:	9c a9       	ldd	r25, Y+52	; 0x34
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e8       	ldi	r20, 0x80	; 128
    11e0:	5f e3       	ldi	r21, 0x3F	; 63
    11e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11e6:	88 23       	and	r24, r24
    11e8:	2c f4       	brge	.+10     	; 0x11f4 <GLCD_sendCommand+0x80>
		__ticks = 1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	98 ab       	std	Y+48, r25	; 0x30
    11f0:	8f a7       	std	Y+47, r24	; 0x2f
    11f2:	3f c0       	rjmp	.+126    	; 0x1272 <GLCD_sendCommand+0xfe>
	else if (__tmp > 65535)
    11f4:	69 a9       	ldd	r22, Y+49	; 0x31
    11f6:	7a a9       	ldd	r23, Y+50	; 0x32
    11f8:	8b a9       	ldd	r24, Y+51	; 0x33
    11fa:	9c a9       	ldd	r25, Y+52	; 0x34
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	3f ef       	ldi	r19, 0xFF	; 255
    1200:	4f e7       	ldi	r20, 0x7F	; 127
    1202:	57 e4       	ldi	r21, 0x47	; 71
    1204:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1208:	18 16       	cp	r1, r24
    120a:	4c f5       	brge	.+82     	; 0x125e <GLCD_sendCommand+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120c:	6d a9       	ldd	r22, Y+53	; 0x35
    120e:	7e a9       	ldd	r23, Y+54	; 0x36
    1210:	8f a9       	ldd	r24, Y+55	; 0x37
    1212:	98 ad       	ldd	r25, Y+56	; 0x38
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e2       	ldi	r20, 0x20	; 32
    121a:	51 e4       	ldi	r21, 0x41	; 65
    121c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	bc 01       	movw	r22, r24
    1226:	cd 01       	movw	r24, r26
    1228:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	98 ab       	std	Y+48, r25	; 0x30
    1232:	8f a7       	std	Y+47, r24	; 0x2f
    1234:	0f c0       	rjmp	.+30     	; 0x1254 <GLCD_sendCommand+0xe0>
    1236:	80 e9       	ldi	r24, 0x90	; 144
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	9e a7       	std	Y+46, r25	; 0x2e
    123c:	8d a7       	std	Y+45, r24	; 0x2d
    123e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1240:	9e a5       	ldd	r25, Y+46	; 0x2e
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <GLCD_sendCommand+0xce>
    1246:	9e a7       	std	Y+46, r25	; 0x2e
    1248:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124a:	8f a5       	ldd	r24, Y+47	; 0x2f
    124c:	98 a9       	ldd	r25, Y+48	; 0x30
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	98 ab       	std	Y+48, r25	; 0x30
    1252:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1254:	8f a5       	ldd	r24, Y+47	; 0x2f
    1256:	98 a9       	ldd	r25, Y+48	; 0x30
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	69 f7       	brne	.-38     	; 0x1236 <GLCD_sendCommand+0xc2>
    125c:	14 c0       	rjmp	.+40     	; 0x1286 <GLCD_sendCommand+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125e:	69 a9       	ldd	r22, Y+49	; 0x31
    1260:	7a a9       	ldd	r23, Y+50	; 0x32
    1262:	8b a9       	ldd	r24, Y+51	; 0x33
    1264:	9c a9       	ldd	r25, Y+52	; 0x34
    1266:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	98 ab       	std	Y+48, r25	; 0x30
    1270:	8f a7       	std	Y+47, r24	; 0x2f
    1272:	8f a5       	ldd	r24, Y+47	; 0x2f
    1274:	98 a9       	ldd	r25, Y+48	; 0x30
    1276:	9c a7       	std	Y+44, r25	; 0x2c
    1278:	8b a7       	std	Y+43, r24	; 0x2b
    127a:	8b a5       	ldd	r24, Y+43	; 0x2b
    127c:	9c a5       	ldd	r25, Y+44	; 0x2c
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <GLCD_sendCommand+0x10a>
    1282:	9c a7       	std	Y+44, r25	; 0x2c
    1284:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_E_PIN, LOGIC_HIGH);
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	41 e0       	ldi	r20, 0x01	; 1
    128c:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a0 e8       	ldi	r26, 0x80	; 128
    1296:	bf e3       	ldi	r27, 0x3F	; 63
    1298:	8f a3       	std	Y+39, r24	; 0x27
    129a:	98 a7       	std	Y+40, r25	; 0x28
    129c:	a9 a7       	std	Y+41, r26	; 0x29
    129e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a0:	6f a1       	ldd	r22, Y+39	; 0x27
    12a2:	78 a5       	ldd	r23, Y+40	; 0x28
    12a4:	89 a5       	ldd	r24, Y+41	; 0x29
    12a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	4a e7       	ldi	r20, 0x7A	; 122
    12ae:	55 e4       	ldi	r21, 0x45	; 69
    12b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	8b a3       	std	Y+35, r24	; 0x23
    12ba:	9c a3       	std	Y+36, r25	; 0x24
    12bc:	ad a3       	std	Y+37, r26	; 0x25
    12be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c0:	6b a1       	ldd	r22, Y+35	; 0x23
    12c2:	7c a1       	ldd	r23, Y+36	; 0x24
    12c4:	8d a1       	ldd	r24, Y+37	; 0x25
    12c6:	9e a1       	ldd	r25, Y+38	; 0x26
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e8       	ldi	r20, 0x80	; 128
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12d4:	88 23       	and	r24, r24
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <GLCD_sendCommand+0x16e>
		__ticks = 1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9a a3       	std	Y+34, r25	; 0x22
    12de:	89 a3       	std	Y+33, r24	; 0x21
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <GLCD_sendCommand+0x1ec>
	else if (__tmp > 65535)
    12e2:	6b a1       	ldd	r22, Y+35	; 0x23
    12e4:	7c a1       	ldd	r23, Y+36	; 0x24
    12e6:	8d a1       	ldd	r24, Y+37	; 0x25
    12e8:	9e a1       	ldd	r25, Y+38	; 0x26
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	3f ef       	ldi	r19, 0xFF	; 255
    12ee:	4f e7       	ldi	r20, 0x7F	; 127
    12f0:	57 e4       	ldi	r21, 0x47	; 71
    12f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12f6:	18 16       	cp	r1, r24
    12f8:	4c f5       	brge	.+82     	; 0x134c <GLCD_sendCommand+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fa:	6f a1       	ldd	r22, Y+39	; 0x27
    12fc:	78 a5       	ldd	r23, Y+40	; 0x28
    12fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1300:	9a a5       	ldd	r25, Y+42	; 0x2a
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e2       	ldi	r20, 0x20	; 32
    1308:	51 e4       	ldi	r21, 0x41	; 65
    130a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9a a3       	std	Y+34, r25	; 0x22
    1320:	89 a3       	std	Y+33, r24	; 0x21
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <GLCD_sendCommand+0x1ce>
    1324:	80 e9       	ldi	r24, 0x90	; 144
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	98 a3       	std	Y+32, r25	; 0x20
    132a:	8f 8f       	std	Y+31, r24	; 0x1f
    132c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    132e:	98 a1       	ldd	r25, Y+32	; 0x20
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <GLCD_sendCommand+0x1bc>
    1334:	98 a3       	std	Y+32, r25	; 0x20
    1336:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1338:	89 a1       	ldd	r24, Y+33	; 0x21
    133a:	9a a1       	ldd	r25, Y+34	; 0x22
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	9a a3       	std	Y+34, r25	; 0x22
    1340:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	89 a1       	ldd	r24, Y+33	; 0x21
    1344:	9a a1       	ldd	r25, Y+34	; 0x22
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f7       	brne	.-38     	; 0x1324 <GLCD_sendCommand+0x1b0>
    134a:	14 c0       	rjmp	.+40     	; 0x1374 <GLCD_sendCommand+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134c:	6b a1       	ldd	r22, Y+35	; 0x23
    134e:	7c a1       	ldd	r23, Y+36	; 0x24
    1350:	8d a1       	ldd	r24, Y+37	; 0x25
    1352:	9e a1       	ldd	r25, Y+38	; 0x26
    1354:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9a a3       	std	Y+34, r25	; 0x22
    135e:	89 a3       	std	Y+33, r24	; 0x21
    1360:	89 a1       	ldd	r24, Y+33	; 0x21
    1362:	9a a1       	ldd	r25, Y+34	; 0x22
    1364:	9e 8f       	std	Y+30, r25	; 0x1e
    1366:	8d 8f       	std	Y+29, r24	; 0x1d
    1368:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <GLCD_sendCommand+0x1f8>
    1370:	9e 8f       	std	Y+30, r25	; 0x1e
    1372:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	switch(command){
    1374:	89 ad       	ldd	r24, Y+57	; 0x39
    1376:	9a ad       	ldd	r25, Y+58	; 0x3a
    1378:	9d af       	std	Y+61, r25	; 0x3d
    137a:	8c af       	std	Y+60, r24	; 0x3c
    137c:	8c ad       	ldd	r24, Y+60	; 0x3c
    137e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1380:	8e 33       	cpi	r24, 0x3E	; 62
    1382:	91 05       	cpc	r25, r1
    1384:	71 f1       	breq	.+92     	; 0x13e2 <GLCD_sendCommand+0x26e>
    1386:	8c ad       	ldd	r24, Y+60	; 0x3c
    1388:	9d ad       	ldd	r25, Y+61	; 0x3d
    138a:	8f 33       	cpi	r24, 0x3F	; 63
    138c:	91 05       	cpc	r25, r1
    138e:	98 f4       	brcc	.+38     	; 0x13b6 <GLCD_sendCommand+0x242>
    1390:	8c ad       	ldd	r24, Y+60	; 0x3c
    1392:	9d ad       	ldd	r25, Y+61	; 0x3d
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	91 05       	cpc	r25, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <GLCD_sendCommand+0x228>
    139a:	80 c0       	rjmp	.+256    	; 0x149c <GLCD_sendCommand+0x328>
    139c:	8c ad       	ldd	r24, Y+60	; 0x3c
    139e:	9d ad       	ldd	r25, Y+61	; 0x3d
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	91 05       	cpc	r25, r1
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <GLCD_sendCommand+0x234>
    13a6:	59 c0       	rjmp	.+178    	; 0x145a <GLCD_sendCommand+0x2e6>
    13a8:	8c ad       	ldd	r24, Y+60	; 0x3c
    13aa:	9d ad       	ldd	r25, Y+61	; 0x3d
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	91 05       	cpc	r25, r1
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <GLCD_sendCommand+0x240>
    13b2:	65 c0       	rjmp	.+202    	; 0x147e <GLCD_sendCommand+0x30a>
    13b4:	81 c0       	rjmp	.+258    	; 0x14b8 <GLCD_sendCommand+0x344>
    13b6:	8c ad       	ldd	r24, Y+60	; 0x3c
    13b8:	9d ad       	ldd	r25, Y+61	; 0x3d
    13ba:	80 34       	cpi	r24, 0x40	; 64
    13bc:	91 05       	cpc	r25, r1
    13be:	b9 f0       	breq	.+46     	; 0x13ee <GLCD_sendCommand+0x27a>
    13c0:	8c ad       	ldd	r24, Y+60	; 0x3c
    13c2:	9d ad       	ldd	r25, Y+61	; 0x3d
    13c4:	80 34       	cpi	r24, 0x40	; 64
    13c6:	91 05       	cpc	r25, r1
    13c8:	30 f0       	brcs	.+12     	; 0x13d6 <GLCD_sendCommand+0x262>
    13ca:	8c ad       	ldd	r24, Y+60	; 0x3c
    13cc:	9d ad       	ldd	r25, Y+61	; 0x3d
    13ce:	88 3b       	cpi	r24, 0xB8	; 184
    13d0:	91 05       	cpc	r25, r1
    13d2:	d1 f0       	breq	.+52     	; 0x1408 <GLCD_sendCommand+0x294>
    13d4:	71 c0       	rjmp	.+226    	; 0x14b8 <GLCD_sendCommand+0x344>
	case GLCD_DISPLAY_ON:
		/* writing on data bus */
		GPIO_writePort(GLCD_DATA_PORT, command);
    13d6:	99 ad       	ldd	r25, Y+57	; 0x39
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	69 2f       	mov	r22, r25
    13dc:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_writePort>
    13e0:	6b c0       	rjmp	.+214    	; 0x14b8 <GLCD_sendCommand+0x344>
		break;

	case GLCD_DISPLAY_OFF:
		/* writing on data bus */
		GPIO_writePort(GLCD_DATA_PORT, command);
    13e2:	99 ad       	ldd	r25, Y+57	; 0x39
    13e4:	83 e0       	ldi	r24, 0x03	; 3
    13e6:	69 2f       	mov	r22, r25
    13e8:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_writePort>
    13ec:	65 c0       	rjmp	.+202    	; 0x14b8 <GLCD_sendCommand+0x344>
		break;

	case GLCD_SET_Y_ADDRESS:
		/* writing y address (0-63) on DB5 - DB0 */
		data &= ~(0xC0);	/* making sure it less than 64 */
    13ee:	8b ad       	ldd	r24, Y+59	; 0x3b
    13f0:	8f 73       	andi	r24, 0x3F	; 63
    13f2:	8b af       	std	Y+59, r24	; 0x3b
		GPIO_writePort(GLCD_DATA_PORT, data);
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	6b ad       	ldd	r22, Y+59	; 0x3b
    13f8:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_writePort>
		GPIO_writePin(GLCD_DATA_PORT, 6, LOGIC_HIGH);
    13fc:	83 e0       	ldi	r24, 0x03	; 3
    13fe:	66 e0       	ldi	r22, 0x06	; 6
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
    1406:	58 c0       	rjmp	.+176    	; 0x14b8 <GLCD_sendCommand+0x344>
		break;

	case GLCD_SET_X_ADDRESS:
		/* writing x address (0-7) on DB5 - DB0 */
		GPIO_writePort(GLCD_DATA_PORT, GLCD_SET_X_ADDRESS);
    1408:	83 e0       	ldi	r24, 0x03	; 3
    140a:	68 eb       	ldi	r22, 0xB8	; 184
    140c:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_writePort>
		GPIO_writePin(GLCD_DATA_PORT, 0, GET_BIT(data,0));
    1410:	8b ad       	ldd	r24, Y+59	; 0x3b
    1412:	98 2f       	mov	r25, r24
    1414:	91 70       	andi	r25, 0x01	; 1
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	49 2f       	mov	r20, r25
    141c:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
		GPIO_writePin(GLCD_DATA_PORT, 1, GET_BIT(data,1));
    1420:	8b ad       	ldd	r24, Y+59	; 0x3b
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	82 70       	andi	r24, 0x02	; 2
    1428:	90 70       	andi	r25, 0x00	; 0
    142a:	95 95       	asr	r25
    142c:	87 95       	ror	r24
    142e:	98 2f       	mov	r25, r24
    1430:	83 e0       	ldi	r24, 0x03	; 3
    1432:	61 e0       	ldi	r22, 0x01	; 1
    1434:	49 2f       	mov	r20, r25
    1436:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
		GPIO_writePin(GLCD_DATA_PORT, 2, GET_BIT(data,2));
    143a:	8b ad       	ldd	r24, Y+59	; 0x3b
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	84 70       	andi	r24, 0x04	; 4
    1442:	90 70       	andi	r25, 0x00	; 0
    1444:	95 95       	asr	r25
    1446:	87 95       	ror	r24
    1448:	95 95       	asr	r25
    144a:	87 95       	ror	r24
    144c:	98 2f       	mov	r25, r24
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	62 e0       	ldi	r22, 0x02	; 2
    1452:	49 2f       	mov	r20, r25
    1454:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
    1458:	2f c0       	rjmp	.+94     	; 0x14b8 <GLCD_sendCommand+0x344>
		break;

	case GLCD_SET_Z_ADDRESS:
		data &= ~(0xC0);	/* making sure it less than 64 */
    145a:	8b ad       	ldd	r24, Y+59	; 0x3b
    145c:	8f 73       	andi	r24, 0x3F	; 63
    145e:	8b af       	std	Y+59, r24	; 0x3b
		GPIO_writePort(GLCD_DATA_PORT, data);
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	6b ad       	ldd	r22, Y+59	; 0x3b
    1464:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_writePort>
		/* writing one on BD6,BD7 */
		GPIO_writePin(GLCD_DATA_PORT, 6, LOGIC_HIGH);
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	66 e0       	ldi	r22, 0x06	; 6
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
		GPIO_writePin(GLCD_DATA_PORT, 7, LOGIC_HIGH);
    1472:	83 e0       	ldi	r24, 0x03	; 3
    1474:	67 e0       	ldi	r22, 0x07	; 7
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
    147c:	1d c0       	rjmp	.+58     	; 0x14b8 <GLCD_sendCommand+0x344>
		break;

	case GLCD_WRITE_DISPLAY_DATA:
		/* RS = 1, R/W = 0 */
		GPIO_writePin(GLCD_CONTROL_PORT, GLCD_RS_PIN, LOGIC_HIGH);
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	63 e0       	ldi	r22, 0x03	; 3
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
		GPIO_writePin(GLCD_CONTROL_PORT, GLCD_R_W_PIN, LOGIC_LOW);
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	62 e0       	ldi	r22, 0x02	; 2
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
		/* writing data on data bus */
		GPIO_writePort(GLCD_DATA_PORT, data);
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	6b ad       	ldd	r22, Y+59	; 0x3b
    1496:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_writePort>
    149a:	0e c0       	rjmp	.+28     	; 0x14b8 <GLCD_sendCommand+0x344>
		break;

	case GLCD_READ_DISPLAY_DATA:
		/* RS = 1, R/W = 1 */
		GPIO_writePin(GLCD_CONTROL_PORT, GLCD_RS_PIN, LOGIC_HIGH);
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	63 e0       	ldi	r22, 0x03	; 3
    14a0:	41 e0       	ldi	r20, 0x01	; 1
    14a2:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
		GPIO_writePin(GLCD_CONTROL_PORT, GLCD_R_W_PIN, LOGIC_HIGH);
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	62 e0       	ldi	r22, 0x02	; 2
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
		/* writing data on data bus */
		GPIO_writePort(GLCD_DATA_PORT, data);
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	6b ad       	ldd	r22, Y+59	; 0x3b
    14b4:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_writePort>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a0 e8       	ldi	r26, 0x80	; 128
    14be:	bf e3       	ldi	r27, 0x3F	; 63
    14c0:	89 8f       	std	Y+25, r24	; 0x19
    14c2:	9a 8f       	std	Y+26, r25	; 0x1a
    14c4:	ab 8f       	std	Y+27, r26	; 0x1b
    14c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c8:	69 8d       	ldd	r22, Y+25	; 0x19
    14ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4a e7       	ldi	r20, 0x7A	; 122
    14d6:	55 e4       	ldi	r21, 0x45	; 69
    14d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	8d 8b       	std	Y+21, r24	; 0x15
    14e2:	9e 8b       	std	Y+22, r25	; 0x16
    14e4:	af 8b       	std	Y+23, r26	; 0x17
    14e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14e8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ea:	7e 89       	ldd	r23, Y+22	; 0x16
    14ec:	8f 89       	ldd	r24, Y+23	; 0x17
    14ee:	98 8d       	ldd	r25, Y+24	; 0x18
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e8       	ldi	r20, 0x80	; 128
    14f6:	5f e3       	ldi	r21, 0x3F	; 63
    14f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14fc:	88 23       	and	r24, r24
    14fe:	2c f4       	brge	.+10     	; 0x150a <GLCD_sendCommand+0x396>
		__ticks = 1;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9c 8b       	std	Y+20, r25	; 0x14
    1506:	8b 8b       	std	Y+19, r24	; 0x13
    1508:	3f c0       	rjmp	.+126    	; 0x1588 <GLCD_sendCommand+0x414>
	else if (__tmp > 65535)
    150a:	6d 89       	ldd	r22, Y+21	; 0x15
    150c:	7e 89       	ldd	r23, Y+22	; 0x16
    150e:	8f 89       	ldd	r24, Y+23	; 0x17
    1510:	98 8d       	ldd	r25, Y+24	; 0x18
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	3f ef       	ldi	r19, 0xFF	; 255
    1516:	4f e7       	ldi	r20, 0x7F	; 127
    1518:	57 e4       	ldi	r21, 0x47	; 71
    151a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    151e:	18 16       	cp	r1, r24
    1520:	4c f5       	brge	.+82     	; 0x1574 <GLCD_sendCommand+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1522:	69 8d       	ldd	r22, Y+25	; 0x19
    1524:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1526:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1528:	9c 8d       	ldd	r25, Y+28	; 0x1c
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e2       	ldi	r20, 0x20	; 32
    1530:	51 e4       	ldi	r21, 0x41	; 65
    1532:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	9c 8b       	std	Y+20, r25	; 0x14
    1548:	8b 8b       	std	Y+19, r24	; 0x13
    154a:	0f c0       	rjmp	.+30     	; 0x156a <GLCD_sendCommand+0x3f6>
    154c:	80 e9       	ldi	r24, 0x90	; 144
    154e:	91 e0       	ldi	r25, 0x01	; 1
    1550:	9a 8b       	std	Y+18, r25	; 0x12
    1552:	89 8b       	std	Y+17, r24	; 0x11
    1554:	89 89       	ldd	r24, Y+17	; 0x11
    1556:	9a 89       	ldd	r25, Y+18	; 0x12
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <GLCD_sendCommand+0x3e4>
    155c:	9a 8b       	std	Y+18, r25	; 0x12
    155e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1560:	8b 89       	ldd	r24, Y+19	; 0x13
    1562:	9c 89       	ldd	r25, Y+20	; 0x14
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	9c 8b       	std	Y+20, r25	; 0x14
    1568:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156a:	8b 89       	ldd	r24, Y+19	; 0x13
    156c:	9c 89       	ldd	r25, Y+20	; 0x14
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	69 f7       	brne	.-38     	; 0x154c <GLCD_sendCommand+0x3d8>
    1572:	14 c0       	rjmp	.+40     	; 0x159c <GLCD_sendCommand+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1574:	6d 89       	ldd	r22, Y+21	; 0x15
    1576:	7e 89       	ldd	r23, Y+22	; 0x16
    1578:	8f 89       	ldd	r24, Y+23	; 0x17
    157a:	98 8d       	ldd	r25, Y+24	; 0x18
    157c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	9c 8b       	std	Y+20, r25	; 0x14
    1586:	8b 8b       	std	Y+19, r24	; 0x13
    1588:	8b 89       	ldd	r24, Y+19	; 0x13
    158a:	9c 89       	ldd	r25, Y+20	; 0x14
    158c:	98 8b       	std	Y+16, r25	; 0x10
    158e:	8f 87       	std	Y+15, r24	; 0x0f
    1590:	8f 85       	ldd	r24, Y+15	; 0x0f
    1592:	98 89       	ldd	r25, Y+16	; 0x10
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <GLCD_sendCommand+0x420>
    1598:	98 8b       	std	Y+16, r25	; 0x10
    159a:	8f 87       	std	Y+15, r24	; 0x0f
		break;
	}
	_delay_ms(1);
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_E_PIN, LOGIC_HIGH);
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	61 e0       	ldi	r22, 0x01	; 1
    15a0:	41 e0       	ldi	r20, 0x01	; 1
    15a2:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a0 e8       	ldi	r26, 0x80	; 128
    15ac:	bf e3       	ldi	r27, 0x3F	; 63
    15ae:	8b 87       	std	Y+11, r24	; 0x0b
    15b0:	9c 87       	std	Y+12, r25	; 0x0c
    15b2:	ad 87       	std	Y+13, r26	; 0x0d
    15b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    15bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	4a e7       	ldi	r20, 0x7A	; 122
    15c4:	55 e4       	ldi	r21, 0x45	; 69
    15c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	8f 83       	std	Y+7, r24	; 0x07
    15d0:	98 87       	std	Y+8, r25	; 0x08
    15d2:	a9 87       	std	Y+9, r26	; 0x09
    15d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15d6:	6f 81       	ldd	r22, Y+7	; 0x07
    15d8:	78 85       	ldd	r23, Y+8	; 0x08
    15da:	89 85       	ldd	r24, Y+9	; 0x09
    15dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <GLCD_sendCommand+0x484>
		__ticks = 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9e 83       	std	Y+6, r25	; 0x06
    15f4:	8d 83       	std	Y+5, r24	; 0x05
    15f6:	3f c0       	rjmp	.+126    	; 0x1676 <GLCD_sendCommand+0x502>
	else if (__tmp > 65535)
    15f8:	6f 81       	ldd	r22, Y+7	; 0x07
    15fa:	78 85       	ldd	r23, Y+8	; 0x08
    15fc:	89 85       	ldd	r24, Y+9	; 0x09
    15fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	3f ef       	ldi	r19, 0xFF	; 255
    1604:	4f e7       	ldi	r20, 0x7F	; 127
    1606:	57 e4       	ldi	r21, 0x47	; 71
    1608:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    160c:	18 16       	cp	r1, r24
    160e:	4c f5       	brge	.+82     	; 0x1662 <GLCD_sendCommand+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1610:	6b 85       	ldd	r22, Y+11	; 0x0b
    1612:	7c 85       	ldd	r23, Y+12	; 0x0c
    1614:	8d 85       	ldd	r24, Y+13	; 0x0d
    1616:	9e 85       	ldd	r25, Y+14	; 0x0e
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e2       	ldi	r20, 0x20	; 32
    161e:	51 e4       	ldi	r21, 0x41	; 65
    1620:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
    1638:	0f c0       	rjmp	.+30     	; 0x1658 <GLCD_sendCommand+0x4e4>
    163a:	80 e9       	ldi	r24, 0x90	; 144
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	9c 83       	std	Y+4, r25	; 0x04
    1640:	8b 83       	std	Y+3, r24	; 0x03
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <GLCD_sendCommand+0x4d2>
    164a:	9c 83       	std	Y+4, r25	; 0x04
    164c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164e:	8d 81       	ldd	r24, Y+5	; 0x05
    1650:	9e 81       	ldd	r25, Y+6	; 0x06
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	9e 83       	std	Y+6, r25	; 0x06
    1656:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1658:	8d 81       	ldd	r24, Y+5	; 0x05
    165a:	9e 81       	ldd	r25, Y+6	; 0x06
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	69 f7       	brne	.-38     	; 0x163a <GLCD_sendCommand+0x4c6>
    1660:	14 c0       	rjmp	.+40     	; 0x168a <GLCD_sendCommand+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1662:	6f 81       	ldd	r22, Y+7	; 0x07
    1664:	78 85       	ldd	r23, Y+8	; 0x08
    1666:	89 85       	ldd	r24, Y+9	; 0x09
    1668:	9a 85       	ldd	r25, Y+10	; 0x0a
    166a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	9e 83       	std	Y+6, r25	; 0x06
    1674:	8d 83       	std	Y+5, r24	; 0x05
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <GLCD_sendCommand+0x50e>
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    168a:	ed 96       	adiw	r28, 0x3d	; 61
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <GLCD_displayCharacter>:

void GLCD_displayCharacter(uint8 data){
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	ab 97       	sbiw	r28, 0x2b	; 43
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	8b a7       	std	Y+43, r24	; 0x2b
	GPIO_writePort(GLCD_DATA_PORT, data);
    16b2:	83 e0       	ldi	r24, 0x03	; 3
    16b4:	6b a5       	ldd	r22, Y+43	; 0x2b
    16b6:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_writePort>
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_RS_PIN, LOGIC_HIGH);			/* Data Mode RS=1 */
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	63 e0       	ldi	r22, 0x03	; 3
    16be:	41 e0       	ldi	r20, 0x01	; 1
    16c0:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_R_W_PIN, LOGIC_LOW);			/* R/W = 0 */
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	62 e0       	ldi	r22, 0x02	; 2
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a0 e8       	ldi	r26, 0x80	; 128
    16d4:	bf e3       	ldi	r27, 0x3F	; 63
    16d6:	8f a3       	std	Y+39, r24	; 0x27
    16d8:	98 a7       	std	Y+40, r25	; 0x28
    16da:	a9 a7       	std	Y+41, r26	; 0x29
    16dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16de:	6f a1       	ldd	r22, Y+39	; 0x27
    16e0:	78 a5       	ldd	r23, Y+40	; 0x28
    16e2:	89 a5       	ldd	r24, Y+41	; 0x29
    16e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	4a e7       	ldi	r20, 0x7A	; 122
    16ec:	55 e4       	ldi	r21, 0x45	; 69
    16ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	8b a3       	std	Y+35, r24	; 0x23
    16f8:	9c a3       	std	Y+36, r25	; 0x24
    16fa:	ad a3       	std	Y+37, r26	; 0x25
    16fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1700:	7c a1       	ldd	r23, Y+36	; 0x24
    1702:	8d a1       	ldd	r24, Y+37	; 0x25
    1704:	9e a1       	ldd	r25, Y+38	; 0x26
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e8       	ldi	r20, 0x80	; 128
    170c:	5f e3       	ldi	r21, 0x3F	; 63
    170e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1712:	88 23       	and	r24, r24
    1714:	2c f4       	brge	.+10     	; 0x1720 <GLCD_displayCharacter+0x84>
		__ticks = 1;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9a a3       	std	Y+34, r25	; 0x22
    171c:	89 a3       	std	Y+33, r24	; 0x21
    171e:	3f c0       	rjmp	.+126    	; 0x179e <GLCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1720:	6b a1       	ldd	r22, Y+35	; 0x23
    1722:	7c a1       	ldd	r23, Y+36	; 0x24
    1724:	8d a1       	ldd	r24, Y+37	; 0x25
    1726:	9e a1       	ldd	r25, Y+38	; 0x26
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	3f ef       	ldi	r19, 0xFF	; 255
    172c:	4f e7       	ldi	r20, 0x7F	; 127
    172e:	57 e4       	ldi	r21, 0x47	; 71
    1730:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1734:	18 16       	cp	r1, r24
    1736:	4c f5       	brge	.+82     	; 0x178a <GLCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1738:	6f a1       	ldd	r22, Y+39	; 0x27
    173a:	78 a5       	ldd	r23, Y+40	; 0x28
    173c:	89 a5       	ldd	r24, Y+41	; 0x29
    173e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e2       	ldi	r20, 0x20	; 32
    1746:	51 e4       	ldi	r21, 0x41	; 65
    1748:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	bc 01       	movw	r22, r24
    1752:	cd 01       	movw	r24, r26
    1754:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	9a a3       	std	Y+34, r25	; 0x22
    175e:	89 a3       	std	Y+33, r24	; 0x21
    1760:	0f c0       	rjmp	.+30     	; 0x1780 <GLCD_displayCharacter+0xe4>
    1762:	80 e9       	ldi	r24, 0x90	; 144
    1764:	91 e0       	ldi	r25, 0x01	; 1
    1766:	98 a3       	std	Y+32, r25	; 0x20
    1768:	8f 8f       	std	Y+31, r24	; 0x1f
    176a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    176c:	98 a1       	ldd	r25, Y+32	; 0x20
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <GLCD_displayCharacter+0xd2>
    1772:	98 a3       	std	Y+32, r25	; 0x20
    1774:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1776:	89 a1       	ldd	r24, Y+33	; 0x21
    1778:	9a a1       	ldd	r25, Y+34	; 0x22
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	9a a3       	std	Y+34, r25	; 0x22
    177e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1780:	89 a1       	ldd	r24, Y+33	; 0x21
    1782:	9a a1       	ldd	r25, Y+34	; 0x22
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	69 f7       	brne	.-38     	; 0x1762 <GLCD_displayCharacter+0xc6>
    1788:	14 c0       	rjmp	.+40     	; 0x17b2 <GLCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178a:	6b a1       	ldd	r22, Y+35	; 0x23
    178c:	7c a1       	ldd	r23, Y+36	; 0x24
    178e:	8d a1       	ldd	r24, Y+37	; 0x25
    1790:	9e a1       	ldd	r25, Y+38	; 0x26
    1792:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	9a a3       	std	Y+34, r25	; 0x22
    179c:	89 a3       	std	Y+33, r24	; 0x21
    179e:	89 a1       	ldd	r24, Y+33	; 0x21
    17a0:	9a a1       	ldd	r25, Y+34	; 0x22
    17a2:	9e 8f       	std	Y+30, r25	; 0x1e
    17a4:	8d 8f       	std	Y+29, r24	; 0x1d
    17a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <GLCD_displayCharacter+0x10e>
    17ae:	9e 8f       	std	Y+30, r25	; 0x1e
    17b0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_E_PIN, LOGIC_HIGH);			/* EN=1 */
    17b2:	82 e0       	ldi	r24, 0x02	; 2
    17b4:	61 e0       	ldi	r22, 0x01	; 1
    17b6:	41 e0       	ldi	r20, 0x01	; 1
    17b8:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	a0 e8       	ldi	r26, 0x80	; 128
    17c2:	bf e3       	ldi	r27, 0x3F	; 63
    17c4:	89 8f       	std	Y+25, r24	; 0x19
    17c6:	9a 8f       	std	Y+26, r25	; 0x1a
    17c8:	ab 8f       	std	Y+27, r26	; 0x1b
    17ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17cc:	69 8d       	ldd	r22, Y+25	; 0x19
    17ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	4a e7       	ldi	r20, 0x7A	; 122
    17da:	55 e4       	ldi	r21, 0x45	; 69
    17dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	8d 8b       	std	Y+21, r24	; 0x15
    17e6:	9e 8b       	std	Y+22, r25	; 0x16
    17e8:	af 8b       	std	Y+23, r26	; 0x17
    17ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17ec:	6d 89       	ldd	r22, Y+21	; 0x15
    17ee:	7e 89       	ldd	r23, Y+22	; 0x16
    17f0:	8f 89       	ldd	r24, Y+23	; 0x17
    17f2:	98 8d       	ldd	r25, Y+24	; 0x18
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e8       	ldi	r20, 0x80	; 128
    17fa:	5f e3       	ldi	r21, 0x3F	; 63
    17fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1800:	88 23       	and	r24, r24
    1802:	2c f4       	brge	.+10     	; 0x180e <GLCD_displayCharacter+0x172>
		__ticks = 1;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	9c 8b       	std	Y+20, r25	; 0x14
    180a:	8b 8b       	std	Y+19, r24	; 0x13
    180c:	3f c0       	rjmp	.+126    	; 0x188c <GLCD_displayCharacter+0x1f0>
	else if (__tmp > 65535)
    180e:	6d 89       	ldd	r22, Y+21	; 0x15
    1810:	7e 89       	ldd	r23, Y+22	; 0x16
    1812:	8f 89       	ldd	r24, Y+23	; 0x17
    1814:	98 8d       	ldd	r25, Y+24	; 0x18
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	3f ef       	ldi	r19, 0xFF	; 255
    181a:	4f e7       	ldi	r20, 0x7F	; 127
    181c:	57 e4       	ldi	r21, 0x47	; 71
    181e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1822:	18 16       	cp	r1, r24
    1824:	4c f5       	brge	.+82     	; 0x1878 <GLCD_displayCharacter+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1826:	69 8d       	ldd	r22, Y+25	; 0x19
    1828:	7a 8d       	ldd	r23, Y+26	; 0x1a
    182a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    182c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e2       	ldi	r20, 0x20	; 32
    1834:	51 e4       	ldi	r21, 0x41	; 65
    1836:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	bc 01       	movw	r22, r24
    1840:	cd 01       	movw	r24, r26
    1842:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	9c 8b       	std	Y+20, r25	; 0x14
    184c:	8b 8b       	std	Y+19, r24	; 0x13
    184e:	0f c0       	rjmp	.+30     	; 0x186e <GLCD_displayCharacter+0x1d2>
    1850:	80 e9       	ldi	r24, 0x90	; 144
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	9a 8b       	std	Y+18, r25	; 0x12
    1856:	89 8b       	std	Y+17, r24	; 0x11
    1858:	89 89       	ldd	r24, Y+17	; 0x11
    185a:	9a 89       	ldd	r25, Y+18	; 0x12
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <GLCD_displayCharacter+0x1c0>
    1860:	9a 8b       	std	Y+18, r25	; 0x12
    1862:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1864:	8b 89       	ldd	r24, Y+19	; 0x13
    1866:	9c 89       	ldd	r25, Y+20	; 0x14
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	9c 8b       	std	Y+20, r25	; 0x14
    186c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186e:	8b 89       	ldd	r24, Y+19	; 0x13
    1870:	9c 89       	ldd	r25, Y+20	; 0x14
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	69 f7       	brne	.-38     	; 0x1850 <GLCD_displayCharacter+0x1b4>
    1876:	14 c0       	rjmp	.+40     	; 0x18a0 <GLCD_displayCharacter+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1878:	6d 89       	ldd	r22, Y+21	; 0x15
    187a:	7e 89       	ldd	r23, Y+22	; 0x16
    187c:	8f 89       	ldd	r24, Y+23	; 0x17
    187e:	98 8d       	ldd	r25, Y+24	; 0x18
    1880:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	9c 8b       	std	Y+20, r25	; 0x14
    188a:	8b 8b       	std	Y+19, r24	; 0x13
    188c:	8b 89       	ldd	r24, Y+19	; 0x13
    188e:	9c 89       	ldd	r25, Y+20	; 0x14
    1890:	98 8b       	std	Y+16, r25	; 0x10
    1892:	8f 87       	std	Y+15, r24	; 0x0f
    1894:	8f 85       	ldd	r24, Y+15	; 0x0f
    1896:	98 89       	ldd	r25, Y+16	; 0x10
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <GLCD_displayCharacter+0x1fc>
    189c:	98 8b       	std	Y+16, r25	; 0x10
    189e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(GLCD_CONTROL_PORT,GLCD_E_PIN,LOGIC_LOW); 				/* Disable GLCD E=0 */
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a0 e8       	ldi	r26, 0x80	; 128
    18b0:	bf e3       	ldi	r27, 0x3F	; 63
    18b2:	8b 87       	std	Y+11, r24	; 0x0b
    18b4:	9c 87       	std	Y+12, r25	; 0x0c
    18b6:	ad 87       	std	Y+13, r26	; 0x0d
    18b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    18bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18be:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	4a e7       	ldi	r20, 0x7A	; 122
    18c8:	55 e4       	ldi	r21, 0x45	; 69
    18ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	8f 83       	std	Y+7, r24	; 0x07
    18d4:	98 87       	std	Y+8, r25	; 0x08
    18d6:	a9 87       	std	Y+9, r26	; 0x09
    18d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18da:	6f 81       	ldd	r22, Y+7	; 0x07
    18dc:	78 85       	ldd	r23, Y+8	; 0x08
    18de:	89 85       	ldd	r24, Y+9	; 0x09
    18e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e8       	ldi	r20, 0x80	; 128
    18e8:	5f e3       	ldi	r21, 0x3F	; 63
    18ea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18ee:	88 23       	and	r24, r24
    18f0:	2c f4       	brge	.+10     	; 0x18fc <GLCD_displayCharacter+0x260>
		__ticks = 1;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	9e 83       	std	Y+6, r25	; 0x06
    18f8:	8d 83       	std	Y+5, r24	; 0x05
    18fa:	3f c0       	rjmp	.+126    	; 0x197a <GLCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    18fc:	6f 81       	ldd	r22, Y+7	; 0x07
    18fe:	78 85       	ldd	r23, Y+8	; 0x08
    1900:	89 85       	ldd	r24, Y+9	; 0x09
    1902:	9a 85       	ldd	r25, Y+10	; 0x0a
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	3f ef       	ldi	r19, 0xFF	; 255
    1908:	4f e7       	ldi	r20, 0x7F	; 127
    190a:	57 e4       	ldi	r21, 0x47	; 71
    190c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1910:	18 16       	cp	r1, r24
    1912:	4c f5       	brge	.+82     	; 0x1966 <GLCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1914:	6b 85       	ldd	r22, Y+11	; 0x0b
    1916:	7c 85       	ldd	r23, Y+12	; 0x0c
    1918:	8d 85       	ldd	r24, Y+13	; 0x0d
    191a:	9e 85       	ldd	r25, Y+14	; 0x0e
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e2       	ldi	r20, 0x20	; 32
    1922:	51 e4       	ldi	r21, 0x41	; 65
    1924:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	bc 01       	movw	r22, r24
    192e:	cd 01       	movw	r24, r26
    1930:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	8d 83       	std	Y+5, r24	; 0x05
    193c:	0f c0       	rjmp	.+30     	; 0x195c <GLCD_displayCharacter+0x2c0>
    193e:	80 e9       	ldi	r24, 0x90	; 144
    1940:	91 e0       	ldi	r25, 0x01	; 1
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	8b 83       	std	Y+3, r24	; 0x03
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <GLCD_displayCharacter+0x2ae>
    194e:	9c 83       	std	Y+4, r25	; 0x04
    1950:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1952:	8d 81       	ldd	r24, Y+5	; 0x05
    1954:	9e 81       	ldd	r25, Y+6	; 0x06
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	9e 83       	std	Y+6, r25	; 0x06
    195a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195c:	8d 81       	ldd	r24, Y+5	; 0x05
    195e:	9e 81       	ldd	r25, Y+6	; 0x06
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	69 f7       	brne	.-38     	; 0x193e <GLCD_displayCharacter+0x2a2>
    1964:	14 c0       	rjmp	.+40     	; 0x198e <GLCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1966:	6f 81       	ldd	r22, Y+7	; 0x07
    1968:	78 85       	ldd	r23, Y+8	; 0x08
    196a:	89 85       	ldd	r24, Y+9	; 0x09
    196c:	9a 85       	ldd	r25, Y+10	; 0x0a
    196e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	9e 83       	std	Y+6, r25	; 0x06
    1978:	8d 83       	std	Y+5, r24	; 0x05
    197a:	8d 81       	ldd	r24, Y+5	; 0x05
    197c:	9e 81       	ldd	r25, Y+6	; 0x06
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <GLCD_displayCharacter+0x2ea>
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing */
}
    198e:	ab 96       	adiw	r28, 0x2b	; 43
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <GLCD_displayString>:

void GLCD_displayString(const char *str){
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <GLCD_displayString+0x6>
    19a6:	0f 92       	push	r0
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	9b 83       	std	Y+3, r25	; 0x03
    19ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    19b0:	19 82       	std	Y+1, r1	; 0x01
    19b2:	0e c0       	rjmp	.+28     	; 0x19d0 <GLCD_displayString+0x30>
	while(str[i] != '\0')
	{
		GLCD_displayCharacter(str[i]);
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	9b 81       	ldd	r25, Y+3	; 0x03
    19be:	fc 01       	movw	r30, r24
    19c0:	e2 0f       	add	r30, r18
    19c2:	f3 1f       	adc	r31, r19
    19c4:	80 81       	ld	r24, Z
    19c6:	0e 94 4e 0b 	call	0x169c	; 0x169c <GLCD_displayCharacter>
		i++;
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	8f 5f       	subi	r24, 0xFF	; 255
    19ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing */
}

void GLCD_displayString(const char *str){
	uint8 i = 0;
	while(str[i] != '\0')
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	fc 01       	movw	r30, r24
    19dc:	e2 0f       	add	r30, r18
    19de:	f3 1f       	adc	r31, r19
    19e0:	80 81       	ld	r24, Z
    19e2:	88 23       	and	r24, r24
    19e4:	39 f7       	brne	.-50     	; 0x19b4 <GLCD_displayString+0x14>
	{
		GLCD_displayCharacter(str[i]);
		i++;
	}
}
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <GLCD_displayStringPageColumn>:

void GLCD_displayStringPageColumn(const char *str, uint8 row, uint8 column, uint8 page){
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	2c 97       	sbiw	r28, 0x0c	; 12
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	99 87       	std	Y+9, r25	; 0x09
    1a08:	88 87       	std	Y+8, r24	; 0x08
    1a0a:	6a 87       	std	Y+10, r22	; 0x0a
    1a0c:	4b 87       	std	Y+11, r20	; 0x0b
    1a0e:	2c 87       	std	Y+12, r18	; 0x0c
	uint8 i, col, Y_Address = 0;
    1a10:	1d 82       	std	Y+5, r1	; 0x05
	float32 page_inc = 0.5;
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a0 e0       	ldi	r26, 0x00	; 0
    1a18:	bf e3       	ldi	r27, 0x3F	; 63
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	9a 83       	std	Y+2, r25	; 0x02
    1a1e:	ab 83       	std	Y+3, r26	; 0x03
    1a20:	bc 83       	std	Y+4, r27	; 0x04
	page = 0xB8 + page;
    1a22:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a24:	88 54       	subi	r24, 0x48	; 72
    1a26:	8c 87       	std	Y+12, r24	; 0x0c
	GLCD_selectPage(LEFT_HALF_PAGE);
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	0e 94 9b 08 	call	0x1136	; 0x1136 <GLCD_selectPage>
	GLCD_sendCommand(GLCD_SET_X_ADDRESS, page);
    1a2e:	88 eb       	ldi	r24, 0xB8	; 184
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a34:	0e 94 ba 08 	call	0x1174	; 0x1174 <GLCD_sendCommand>
	GLCD_displayString(str);
    1a38:	88 85       	ldd	r24, Y+8	; 0x08
    1a3a:	99 85       	ldd	r25, Y+9	; 0x09
    1a3c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <GLCD_displayString>

}
    1a40:	2c 96       	adiw	r28, 0x0c	; 12
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <GLCD_diplayImage>:

void GLCD_diplayImage(long img[]){
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <GLCD_diplayImage+0x6>
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01

}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <GLCD_diplayGIF>:
void GLCD_diplayGIF(long **images){
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <GLCD_diplayGIF+0x6>
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	9a 83       	std	Y+2, r25	; 0x02
    1a76:	89 83       	std	Y+1, r24	; 0x01

}
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <GLCD_clearScreen>:
void GLCD_clearScreen(){
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <GLCD_clearScreen+0x6>
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
	uint8 i, j;
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_CS1_PIN, LOGIC_HIGH);
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	65 e0       	ldi	r22, 0x05	; 5
    1a90:	41 e0       	ldi	r20, 0x01	; 1
    1a92:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_CS2_PIN, LOGIC_HIGH);
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	64 e0       	ldi	r22, 0x04	; 4
    1a9a:	41 e0       	ldi	r20, 0x01	; 1
    1a9c:	0e 94 65 0e 	call	0x1cca	; 0x1cca <GPIO_writePin>

	for(i = 0; i < NO_PAGES; i++){
    1aa0:	1a 82       	std	Y+2, r1	; 0x02
    1aa2:	20 c0       	rjmp	.+64     	; 0x1ae4 <GLCD_clearScreen+0x62>
		GLCD_sendCommand(GLCD_SET_X_ADDRESS, 0xB8 + i);
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	28 54       	subi	r18, 0x48	; 72
    1aaa:	88 eb       	ldi	r24, 0xB8	; 184
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	62 2f       	mov	r22, r18
    1ab0:	0e 94 ba 08 	call	0x1174	; 0x1174 <GLCD_sendCommand>
		for (j = 0; j < 64; j++) {
    1ab4:	19 82       	std	Y+1, r1	; 0x01
    1ab6:	06 c0       	rjmp	.+12     	; 0x1ac4 <GLCD_clearScreen+0x42>
			GLCD_displayCharacter(0);
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	0e 94 4e 0b 	call	0x169c	; 0x169c <GLCD_displayCharacter>
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_CS1_PIN, LOGIC_HIGH);
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_CS2_PIN, LOGIC_HIGH);

	for(i = 0; i < NO_PAGES; i++){
		GLCD_sendCommand(GLCD_SET_X_ADDRESS, 0xB8 + i);
		for (j = 0; j < 64; j++) {
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	8f 5f       	subi	r24, 0xFF	; 255
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	80 34       	cpi	r24, 0x40	; 64
    1ac8:	b8 f3       	brcs	.-18     	; 0x1ab8 <GLCD_clearScreen+0x36>
			GLCD_displayCharacter(0);
		}
		GLCD_sendCommand(GLCD_SET_Y_ADDRESS, 0x40);
    1aca:	80 e4       	ldi	r24, 0x40	; 64
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	60 e4       	ldi	r22, 0x40	; 64
    1ad0:	0e 94 ba 08 	call	0x1174	; 0x1174 <GLCD_sendCommand>
		GLCD_sendCommand(GLCD_SET_X_ADDRESS, 0xB8);
    1ad4:	88 eb       	ldi	r24, 0xB8	; 184
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	68 eb       	ldi	r22, 0xB8	; 184
    1ada:	0e 94 ba 08 	call	0x1174	; 0x1174 <GLCD_sendCommand>
void GLCD_clearScreen(){
	uint8 i, j;
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_CS1_PIN, LOGIC_HIGH);
	GPIO_writePin(GLCD_CONTROL_PORT, GLCD_CS2_PIN, LOGIC_HIGH);

	for(i = 0; i < NO_PAGES; i++){
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	8f 5f       	subi	r24, 0xFF	; 255
    1ae2:	8a 83       	std	Y+2, r24	; 0x02
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	88 30       	cpi	r24, 0x08	; 8
    1ae8:	e8 f2       	brcs	.-70     	; 0x1aa4 <GLCD_clearScreen+0x22>
			GLCD_displayCharacter(0);
		}
		GLCD_sendCommand(GLCD_SET_Y_ADDRESS, 0x40);
		GLCD_sendCommand(GLCD_SET_X_ADDRESS, 0xB8);
	}
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <GPIO_setupPinDirection+0x6>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <GPIO_setupPinDirection+0x8>
    1afc:	0f 92       	push	r0
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	6a 83       	std	Y+2, r22	; 0x02
    1b06:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	88 30       	cpi	r24, 0x08	; 8
    1b0c:	08 f0       	brcs	.+2      	; 0x1b10 <GPIO_setupPinDirection+0x1c>
    1b0e:	d5 c0       	rjmp	.+426    	; 0x1cba <GPIO_setupPinDirection+0x1c6>
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	84 30       	cpi	r24, 0x04	; 4
    1b14:	08 f0       	brcs	.+2      	; 0x1b18 <GPIO_setupPinDirection+0x24>
    1b16:	d1 c0       	rjmp	.+418    	; 0x1cba <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3d 83       	std	Y+5, r19	; 0x05
    1b20:	2c 83       	std	Y+4, r18	; 0x04
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	91 05       	cpc	r25, r1
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <GPIO_setupPinDirection+0x3a>
    1b2c:	43 c0       	rjmp	.+134    	; 0x1bb4 <GPIO_setupPinDirection+0xc0>
    1b2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b30:	3d 81       	ldd	r19, Y+5	; 0x05
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <GPIO_setupPinDirection+0x4e>
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	71 f0       	breq	.+28     	; 0x1b5c <GPIO_setupPinDirection+0x68>
    1b40:	bc c0       	rjmp	.+376    	; 0x1cba <GPIO_setupPinDirection+0x1c6>
    1b42:	2c 81       	ldd	r18, Y+4	; 0x04
    1b44:	3d 81       	ldd	r19, Y+5	; 0x05
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <GPIO_setupPinDirection+0x5a>
    1b4c:	5f c0       	rjmp	.+190    	; 0x1c0c <GPIO_setupPinDirection+0x118>
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	83 30       	cpi	r24, 0x03	; 3
    1b54:	91 05       	cpc	r25, r1
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <GPIO_setupPinDirection+0x66>
    1b58:	85 c0       	rjmp	.+266    	; 0x1c64 <GPIO_setupPinDirection+0x170>
    1b5a:	af c0       	rjmp	.+350    	; 0x1cba <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	a1 f4       	brne	.+40     	; 0x1b8a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b62:	aa e3       	ldi	r26, 0x3A	; 58
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	ea e3       	ldi	r30, 0x3A	; 58
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <GPIO_setupPinDirection+0x8c>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <GPIO_setupPinDirection+0x88>
    1b84:	84 2b       	or	r24, r20
    1b86:	8c 93       	st	X, r24
    1b88:	98 c0       	rjmp	.+304    	; 0x1cba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b8a:	aa e3       	ldi	r26, 0x3A	; 58
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	ea e3       	ldi	r30, 0x3A	; 58
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <GPIO_setupPinDirection+0xb4>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <GPIO_setupPinDirection+0xb0>
    1bac:	80 95       	com	r24
    1bae:	84 23       	and	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	83 c0       	rjmp	.+262    	; 0x1cba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	a1 f4       	brne	.+40     	; 0x1be2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1bba:	a7 e3       	ldi	r26, 0x37	; 55
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e7 e3       	ldi	r30, 0x37	; 55
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	48 2f       	mov	r20, r24
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	02 2e       	mov	r0, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <GPIO_setupPinDirection+0xe4>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	0a 94       	dec	r0
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <GPIO_setupPinDirection+0xe0>
    1bdc:	84 2b       	or	r24, r20
    1bde:	8c 93       	st	X, r24
    1be0:	6c c0       	rjmp	.+216    	; 0x1cba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1be2:	a7 e3       	ldi	r26, 0x37	; 55
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e7 e3       	ldi	r30, 0x37	; 55
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	48 2f       	mov	r20, r24
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	02 2e       	mov	r0, r18
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <GPIO_setupPinDirection+0x10c>
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	0a 94       	dec	r0
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <GPIO_setupPinDirection+0x108>
    1c04:	80 95       	com	r24
    1c06:	84 23       	and	r24, r20
    1c08:	8c 93       	st	X, r24
    1c0a:	57 c0       	rjmp	.+174    	; 0x1cba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	a1 f4       	brne	.+40     	; 0x1c3a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1c12:	a4 e3       	ldi	r26, 0x34	; 52
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e4 e3       	ldi	r30, 0x34	; 52
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <GPIO_setupPinDirection+0x13c>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <GPIO_setupPinDirection+0x138>
    1c34:	84 2b       	or	r24, r20
    1c36:	8c 93       	st	X, r24
    1c38:	40 c0       	rjmp	.+128    	; 0x1cba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1c3a:	a4 e3       	ldi	r26, 0x34	; 52
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e4 e3       	ldi	r30, 0x34	; 52
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 2e       	mov	r0, r18
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <GPIO_setupPinDirection+0x164>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	0a 94       	dec	r0
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <GPIO_setupPinDirection+0x160>
    1c5c:	80 95       	com	r24
    1c5e:	84 23       	and	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	2b c0       	rjmp	.+86     	; 0x1cba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	a1 f4       	brne	.+40     	; 0x1c92 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c6a:	a1 e3       	ldi	r26, 0x31	; 49
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e1 e3       	ldi	r30, 0x31	; 49
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	48 2f       	mov	r20, r24
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 2e       	mov	r0, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <GPIO_setupPinDirection+0x194>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	0a 94       	dec	r0
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <GPIO_setupPinDirection+0x190>
    1c8c:	84 2b       	or	r24, r20
    1c8e:	8c 93       	st	X, r24
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c92:	a1 e3       	ldi	r26, 0x31	; 49
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e1 e3       	ldi	r30, 0x31	; 49
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 2e       	mov	r0, r18
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <GPIO_setupPinDirection+0x1bc>
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	0a 94       	dec	r0
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <GPIO_setupPinDirection+0x1b8>
    1cb4:	80 95       	com	r24
    1cb6:	84 23       	and	r24, r20
    1cb8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <GPIO_writePin+0x6>
    1cd0:	00 d0       	rcall	.+0      	; 0x1cd2 <GPIO_writePin+0x8>
    1cd2:	0f 92       	push	r0
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	6a 83       	std	Y+2, r22	; 0x02
    1cdc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	88 30       	cpi	r24, 0x08	; 8
    1ce2:	08 f0       	brcs	.+2      	; 0x1ce6 <GPIO_writePin+0x1c>
    1ce4:	d5 c0       	rjmp	.+426    	; 0x1e90 <GPIO_writePin+0x1c6>
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	84 30       	cpi	r24, 0x04	; 4
    1cea:	08 f0       	brcs	.+2      	; 0x1cee <GPIO_writePin+0x24>
    1cec:	d1 c0       	rjmp	.+418    	; 0x1e90 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	3d 83       	std	Y+5, r19	; 0x05
    1cf6:	2c 83       	std	Y+4, r18	; 0x04
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	91 05       	cpc	r25, r1
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <GPIO_writePin+0x3a>
    1d02:	43 c0       	rjmp	.+134    	; 0x1d8a <GPIO_writePin+0xc0>
    1d04:	2c 81       	ldd	r18, Y+4	; 0x04
    1d06:	3d 81       	ldd	r19, Y+5	; 0x05
    1d08:	22 30       	cpi	r18, 0x02	; 2
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <GPIO_writePin+0x4e>
    1d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d10:	9d 81       	ldd	r25, Y+5	; 0x05
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	71 f0       	breq	.+28     	; 0x1d32 <GPIO_writePin+0x68>
    1d16:	bc c0       	rjmp	.+376    	; 0x1e90 <GPIO_writePin+0x1c6>
    1d18:	2c 81       	ldd	r18, Y+4	; 0x04
    1d1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d1c:	22 30       	cpi	r18, 0x02	; 2
    1d1e:	31 05       	cpc	r19, r1
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <GPIO_writePin+0x5a>
    1d22:	5f c0       	rjmp	.+190    	; 0x1de2 <GPIO_writePin+0x118>
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	9d 81       	ldd	r25, Y+5	; 0x05
    1d28:	83 30       	cpi	r24, 0x03	; 3
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <GPIO_writePin+0x66>
    1d2e:	85 c0       	rjmp	.+266    	; 0x1e3a <GPIO_writePin+0x170>
    1d30:	af c0       	rjmp	.+350    	; 0x1e90 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	a1 f4       	brne	.+40     	; 0x1d60 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1d38:	ab e3       	ldi	r26, 0x3B	; 59
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	eb e3       	ldi	r30, 0x3B	; 59
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	48 2f       	mov	r20, r24
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	02 2e       	mov	r0, r18
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <GPIO_writePin+0x8c>
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	0a 94       	dec	r0
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <GPIO_writePin+0x88>
    1d5a:	84 2b       	or	r24, r20
    1d5c:	8c 93       	st	X, r24
    1d5e:	98 c0       	rjmp	.+304    	; 0x1e90 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d60:	ab e3       	ldi	r26, 0x3B	; 59
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	eb e3       	ldi	r30, 0x3B	; 59
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 2e       	mov	r0, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <GPIO_writePin+0xb4>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	0a 94       	dec	r0
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <GPIO_writePin+0xb0>
    1d82:	80 95       	com	r24
    1d84:	84 23       	and	r24, r20
    1d86:	8c 93       	st	X, r24
    1d88:	83 c0       	rjmp	.+262    	; 0x1e90 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	a1 f4       	brne	.+40     	; 0x1db8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d90:	a8 e3       	ldi	r26, 0x38	; 56
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e8 e3       	ldi	r30, 0x38	; 56
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <GPIO_writePin+0xe4>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <GPIO_writePin+0xe0>
    1db2:	84 2b       	or	r24, r20
    1db4:	8c 93       	st	X, r24
    1db6:	6c c0       	rjmp	.+216    	; 0x1e90 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1db8:	a8 e3       	ldi	r26, 0x38	; 56
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e8 e3       	ldi	r30, 0x38	; 56
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <GPIO_writePin+0x10c>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <GPIO_writePin+0x108>
    1dda:	80 95       	com	r24
    1ddc:	84 23       	and	r24, r20
    1dde:	8c 93       	st	X, r24
    1de0:	57 c0       	rjmp	.+174    	; 0x1e90 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	81 30       	cpi	r24, 0x01	; 1
    1de6:	a1 f4       	brne	.+40     	; 0x1e10 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1de8:	a5 e3       	ldi	r26, 0x35	; 53
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e5 e3       	ldi	r30, 0x35	; 53
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	48 2f       	mov	r20, r24
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	02 2e       	mov	r0, r18
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <GPIO_writePin+0x13c>
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	0a 94       	dec	r0
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <GPIO_writePin+0x138>
    1e0a:	84 2b       	or	r24, r20
    1e0c:	8c 93       	st	X, r24
    1e0e:	40 c0       	rjmp	.+128    	; 0x1e90 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1e10:	a5 e3       	ldi	r26, 0x35	; 53
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e5 e3       	ldi	r30, 0x35	; 53
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	02 2e       	mov	r0, r18
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <GPIO_writePin+0x164>
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	0a 94       	dec	r0
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <GPIO_writePin+0x160>
    1e32:	80 95       	com	r24
    1e34:	84 23       	and	r24, r20
    1e36:	8c 93       	st	X, r24
    1e38:	2b c0       	rjmp	.+86     	; 0x1e90 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	a1 f4       	brne	.+40     	; 0x1e68 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1e40:	a2 e3       	ldi	r26, 0x32	; 50
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e2 e3       	ldi	r30, 0x32	; 50
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	48 2f       	mov	r20, r24
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 2e       	mov	r0, r18
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <GPIO_writePin+0x194>
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	0a 94       	dec	r0
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <GPIO_writePin+0x190>
    1e62:	84 2b       	or	r24, r20
    1e64:	8c 93       	st	X, r24
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e68:	a2 e3       	ldi	r26, 0x32	; 50
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e2 e3       	ldi	r30, 0x32	; 50
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	48 2f       	mov	r20, r24
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 2e       	mov	r0, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <GPIO_writePin+0x1bc>
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	0a 94       	dec	r0
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <GPIO_writePin+0x1b8>
    1e8a:	80 95       	com	r24
    1e8c:	84 23       	and	r24, r20
    1e8e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <GPIO_readPin+0x6>
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <GPIO_readPin+0x8>
    1ea8:	0f 92       	push	r0
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	8a 83       	std	Y+2, r24	; 0x02
    1eb0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1eb2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	88 30       	cpi	r24, 0x08	; 8
    1eb8:	08 f0       	brcs	.+2      	; 0x1ebc <GPIO_readPin+0x1c>
    1eba:	84 c0       	rjmp	.+264    	; 0x1fc4 <GPIO_readPin+0x124>
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	84 30       	cpi	r24, 0x04	; 4
    1ec0:	08 f0       	brcs	.+2      	; 0x1ec4 <GPIO_readPin+0x24>
    1ec2:	80 c0       	rjmp	.+256    	; 0x1fc4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	3d 83       	std	Y+5, r19	; 0x05
    1ecc:	2c 83       	std	Y+4, r18	; 0x04
    1ece:	4c 81       	ldd	r20, Y+4	; 0x04
    1ed0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ed2:	41 30       	cpi	r20, 0x01	; 1
    1ed4:	51 05       	cpc	r21, r1
    1ed6:	79 f1       	breq	.+94     	; 0x1f36 <GPIO_readPin+0x96>
    1ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eda:	9d 81       	ldd	r25, Y+5	; 0x05
    1edc:	82 30       	cpi	r24, 0x02	; 2
    1ede:	91 05       	cpc	r25, r1
    1ee0:	34 f4       	brge	.+12     	; 0x1eee <GPIO_readPin+0x4e>
    1ee2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ee4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee6:	21 15       	cp	r18, r1
    1ee8:	31 05       	cpc	r19, r1
    1eea:	69 f0       	breq	.+26     	; 0x1f06 <GPIO_readPin+0x66>
    1eec:	6b c0       	rjmp	.+214    	; 0x1fc4 <GPIO_readPin+0x124>
    1eee:	4c 81       	ldd	r20, Y+4	; 0x04
    1ef0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ef2:	42 30       	cpi	r20, 0x02	; 2
    1ef4:	51 05       	cpc	r21, r1
    1ef6:	b9 f1       	breq	.+110    	; 0x1f66 <GPIO_readPin+0xc6>
    1ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    1efa:	9d 81       	ldd	r25, Y+5	; 0x05
    1efc:	83 30       	cpi	r24, 0x03	; 3
    1efe:	91 05       	cpc	r25, r1
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <GPIO_readPin+0x64>
    1f02:	49 c0       	rjmp	.+146    	; 0x1f96 <GPIO_readPin+0xf6>
    1f04:	5f c0       	rjmp	.+190    	; 0x1fc4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1f06:	e9 e3       	ldi	r30, 0x39	; 57
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a9 01       	movw	r20, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <GPIO_readPin+0x7e>
    1f1a:	55 95       	asr	r21
    1f1c:	47 95       	ror	r20
    1f1e:	8a 95       	dec	r24
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <GPIO_readPin+0x7a>
    1f22:	ca 01       	movw	r24, r20
    1f24:	81 70       	andi	r24, 0x01	; 1
    1f26:	90 70       	andi	r25, 0x00	; 0
    1f28:	88 23       	and	r24, r24
    1f2a:	19 f0       	breq	.+6      	; 0x1f32 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	49 c0       	rjmp	.+146    	; 0x1fc4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f32:	19 82       	std	Y+1, r1	; 0x01
    1f34:	47 c0       	rjmp	.+142    	; 0x1fc4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1f36:	e6 e3       	ldi	r30, 0x36	; 54
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	a9 01       	movw	r20, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <GPIO_readPin+0xae>
    1f4a:	55 95       	asr	r21
    1f4c:	47 95       	ror	r20
    1f4e:	8a 95       	dec	r24
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <GPIO_readPin+0xaa>
    1f52:	ca 01       	movw	r24, r20
    1f54:	81 70       	andi	r24, 0x01	; 1
    1f56:	90 70       	andi	r25, 0x00	; 0
    1f58:	88 23       	and	r24, r24
    1f5a:	19 f0       	breq	.+6      	; 0x1f62 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	31 c0       	rjmp	.+98     	; 0x1fc4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f62:	19 82       	std	Y+1, r1	; 0x01
    1f64:	2f c0       	rjmp	.+94     	; 0x1fc4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f66:	e3 e3       	ldi	r30, 0x33	; 51
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	a9 01       	movw	r20, r18
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <GPIO_readPin+0xde>
    1f7a:	55 95       	asr	r21
    1f7c:	47 95       	ror	r20
    1f7e:	8a 95       	dec	r24
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <GPIO_readPin+0xda>
    1f82:	ca 01       	movw	r24, r20
    1f84:	81 70       	andi	r24, 0x01	; 1
    1f86:	90 70       	andi	r25, 0x00	; 0
    1f88:	88 23       	and	r24, r24
    1f8a:	19 f0       	breq	.+6      	; 0x1f92 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	19 c0       	rjmp	.+50     	; 0x1fc4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f92:	19 82       	std	Y+1, r1	; 0x01
    1f94:	17 c0       	rjmp	.+46     	; 0x1fc4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f96:	e0 e3       	ldi	r30, 0x30	; 48
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	88 2f       	mov	r24, r24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a9 01       	movw	r20, r18
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <GPIO_readPin+0x10e>
    1faa:	55 95       	asr	r21
    1fac:	47 95       	ror	r20
    1fae:	8a 95       	dec	r24
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <GPIO_readPin+0x10a>
    1fb2:	ca 01       	movw	r24, r20
    1fb4:	81 70       	andi	r24, 0x01	; 1
    1fb6:	90 70       	andi	r25, 0x00	; 0
    1fb8:	88 23       	and	r24, r24
    1fba:	19 f0       	breq	.+6      	; 0x1fc2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	01 c0       	rjmp	.+2      	; 0x1fc4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fc2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <GPIO_setupPortDirection+0x6>
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <GPIO_setupPortDirection+0x8>
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	84 30       	cpi	r24, 0x04	; 4
    1fea:	90 f5       	brcc	.+100    	; 0x2050 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	3c 83       	std	Y+4, r19	; 0x04
    1ff4:	2b 83       	std	Y+3, r18	; 0x03
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	d1 f0       	breq	.+52     	; 0x2034 <GPIO_setupPortDirection+0x5e>
    2000:	2b 81       	ldd	r18, Y+3	; 0x03
    2002:	3c 81       	ldd	r19, Y+4	; 0x04
    2004:	22 30       	cpi	r18, 0x02	; 2
    2006:	31 05       	cpc	r19, r1
    2008:	2c f4       	brge	.+10     	; 0x2014 <GPIO_setupPortDirection+0x3e>
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	61 f0       	breq	.+24     	; 0x202a <GPIO_setupPortDirection+0x54>
    2012:	1e c0       	rjmp	.+60     	; 0x2050 <GPIO_setupPortDirection+0x7a>
    2014:	2b 81       	ldd	r18, Y+3	; 0x03
    2016:	3c 81       	ldd	r19, Y+4	; 0x04
    2018:	22 30       	cpi	r18, 0x02	; 2
    201a:	31 05       	cpc	r19, r1
    201c:	81 f0       	breq	.+32     	; 0x203e <GPIO_setupPortDirection+0x68>
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	83 30       	cpi	r24, 0x03	; 3
    2024:	91 05       	cpc	r25, r1
    2026:	81 f0       	breq	.+32     	; 0x2048 <GPIO_setupPortDirection+0x72>
    2028:	13 c0       	rjmp	.+38     	; 0x2050 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    202a:	ea e3       	ldi	r30, 0x3A	; 58
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	80 83       	st	Z, r24
    2032:	0e c0       	rjmp	.+28     	; 0x2050 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2034:	e7 e3       	ldi	r30, 0x37	; 55
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	80 83       	st	Z, r24
    203c:	09 c0       	rjmp	.+18     	; 0x2050 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    203e:	e4 e3       	ldi	r30, 0x34	; 52
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	80 83       	st	Z, r24
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2048:	e1 e3       	ldi	r30, 0x31	; 49
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <GPIO_writePort+0x6>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <GPIO_writePort+0x8>
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	84 30       	cpi	r24, 0x04	; 4
    2072:	90 f5       	brcc	.+100    	; 0x20d8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	3c 83       	std	Y+4, r19	; 0x04
    207c:	2b 83       	std	Y+3, r18	; 0x03
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	91 05       	cpc	r25, r1
    2086:	d1 f0       	breq	.+52     	; 0x20bc <GPIO_writePort+0x5e>
    2088:	2b 81       	ldd	r18, Y+3	; 0x03
    208a:	3c 81       	ldd	r19, Y+4	; 0x04
    208c:	22 30       	cpi	r18, 0x02	; 2
    208e:	31 05       	cpc	r19, r1
    2090:	2c f4       	brge	.+10     	; 0x209c <GPIO_writePort+0x3e>
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	9c 81       	ldd	r25, Y+4	; 0x04
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	61 f0       	breq	.+24     	; 0x20b2 <GPIO_writePort+0x54>
    209a:	1e c0       	rjmp	.+60     	; 0x20d8 <GPIO_writePort+0x7a>
    209c:	2b 81       	ldd	r18, Y+3	; 0x03
    209e:	3c 81       	ldd	r19, Y+4	; 0x04
    20a0:	22 30       	cpi	r18, 0x02	; 2
    20a2:	31 05       	cpc	r19, r1
    20a4:	81 f0       	breq	.+32     	; 0x20c6 <GPIO_writePort+0x68>
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	83 30       	cpi	r24, 0x03	; 3
    20ac:	91 05       	cpc	r25, r1
    20ae:	81 f0       	breq	.+32     	; 0x20d0 <GPIO_writePort+0x72>
    20b0:	13 c0       	rjmp	.+38     	; 0x20d8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    20b2:	eb e3       	ldi	r30, 0x3B	; 59
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	80 83       	st	Z, r24
    20ba:	0e c0       	rjmp	.+28     	; 0x20d8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    20bc:	e8 e3       	ldi	r30, 0x38	; 56
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	80 83       	st	Z, r24
    20c4:	09 c0       	rjmp	.+18     	; 0x20d8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    20c6:	e5 e3       	ldi	r30, 0x35	; 53
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	80 83       	st	Z, r24
    20ce:	04 c0       	rjmp	.+8      	; 0x20d8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    20d0:	e2 e3       	ldi	r30, 0x32	; 50
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	80 83       	st	Z, r24
			break;
		}
	}
}
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <GPIO_readPort+0x6>
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <GPIO_readPort+0x8>
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    20f4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	84 30       	cpi	r24, 0x04	; 4
    20fa:	90 f5       	brcc	.+100    	; 0x2160 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	3c 83       	std	Y+4, r19	; 0x04
    2104:	2b 83       	std	Y+3, r18	; 0x03
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	9c 81       	ldd	r25, Y+4	; 0x04
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	91 05       	cpc	r25, r1
    210e:	d1 f0       	breq	.+52     	; 0x2144 <GPIO_readPort+0x5e>
    2110:	2b 81       	ldd	r18, Y+3	; 0x03
    2112:	3c 81       	ldd	r19, Y+4	; 0x04
    2114:	22 30       	cpi	r18, 0x02	; 2
    2116:	31 05       	cpc	r19, r1
    2118:	2c f4       	brge	.+10     	; 0x2124 <GPIO_readPort+0x3e>
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	9c 81       	ldd	r25, Y+4	; 0x04
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	61 f0       	breq	.+24     	; 0x213a <GPIO_readPort+0x54>
    2122:	1e c0       	rjmp	.+60     	; 0x2160 <GPIO_readPort+0x7a>
    2124:	2b 81       	ldd	r18, Y+3	; 0x03
    2126:	3c 81       	ldd	r19, Y+4	; 0x04
    2128:	22 30       	cpi	r18, 0x02	; 2
    212a:	31 05       	cpc	r19, r1
    212c:	81 f0       	breq	.+32     	; 0x214e <GPIO_readPort+0x68>
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	83 30       	cpi	r24, 0x03	; 3
    2134:	91 05       	cpc	r25, r1
    2136:	81 f0       	breq	.+32     	; 0x2158 <GPIO_readPort+0x72>
    2138:	13 c0       	rjmp	.+38     	; 0x2160 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    213a:	e9 e3       	ldi	r30, 0x39	; 57
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	0e c0       	rjmp	.+28     	; 0x2160 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2144:	e6 e3       	ldi	r30, 0x36	; 54
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	09 c0       	rjmp	.+18     	; 0x2160 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    214e:	e3 e3       	ldi	r30, 0x33	; 51
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	04 c0       	rjmp	.+8      	; 0x2160 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2158:	e0 e3       	ldi	r30, 0x30	; 48
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2160:	89 81       	ldd	r24, Y+1	; 0x01
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <main>:

#include "glcd.h"
#include "util/delay.h"

int main(void)
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
	// initialize GLCD
	GLCD_init();
    2178:	0e 94 ef 07 	call	0xfde	; 0xfde <GLCD_init>
	GLCD_displayCharacter('A');
    217c:	81 e4       	ldi	r24, 0x41	; 65
    217e:	0e 94 4e 0b 	call	0x169c	; 0x169c <GLCD_displayCharacter>
	GLCD_displayCharacter('A');
    2182:	81 e4       	ldi	r24, 0x41	; 65
    2184:	0e 94 4e 0b 	call	0x169c	; 0x169c <GLCD_displayCharacter>
	GLCD_displayCharacter('A');
    2188:	81 e4       	ldi	r24, 0x41	; 65
    218a:	0e 94 4e 0b 	call	0x169c	; 0x169c <GLCD_displayCharacter>
	GLCD_displayCharacter('S');
    218e:	83 e5       	ldi	r24, 0x53	; 83
    2190:	0e 94 4e 0b 	call	0x169c	; 0x169c <GLCD_displayCharacter>
    2194:	ff cf       	rjmp	.-2      	; 0x2194 <main+0x24>

00002196 <__prologue_saves__>:
    2196:	2f 92       	push	r2
    2198:	3f 92       	push	r3
    219a:	4f 92       	push	r4
    219c:	5f 92       	push	r5
    219e:	6f 92       	push	r6
    21a0:	7f 92       	push	r7
    21a2:	8f 92       	push	r8
    21a4:	9f 92       	push	r9
    21a6:	af 92       	push	r10
    21a8:	bf 92       	push	r11
    21aa:	cf 92       	push	r12
    21ac:	df 92       	push	r13
    21ae:	ef 92       	push	r14
    21b0:	ff 92       	push	r15
    21b2:	0f 93       	push	r16
    21b4:	1f 93       	push	r17
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	ca 1b       	sub	r28, r26
    21c0:	db 0b       	sbc	r29, r27
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	09 94       	ijmp

000021ce <__epilogue_restores__>:
    21ce:	2a 88       	ldd	r2, Y+18	; 0x12
    21d0:	39 88       	ldd	r3, Y+17	; 0x11
    21d2:	48 88       	ldd	r4, Y+16	; 0x10
    21d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    21d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    21d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    21da:	8c 84       	ldd	r8, Y+12	; 0x0c
    21dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    21de:	aa 84       	ldd	r10, Y+10	; 0x0a
    21e0:	b9 84       	ldd	r11, Y+9	; 0x09
    21e2:	c8 84       	ldd	r12, Y+8	; 0x08
    21e4:	df 80       	ldd	r13, Y+7	; 0x07
    21e6:	ee 80       	ldd	r14, Y+6	; 0x06
    21e8:	fd 80       	ldd	r15, Y+5	; 0x05
    21ea:	0c 81       	ldd	r16, Y+4	; 0x04
    21ec:	1b 81       	ldd	r17, Y+3	; 0x03
    21ee:	aa 81       	ldd	r26, Y+2	; 0x02
    21f0:	b9 81       	ldd	r27, Y+1	; 0x01
    21f2:	ce 0f       	add	r28, r30
    21f4:	d1 1d       	adc	r29, r1
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	ed 01       	movw	r28, r26
    2202:	08 95       	ret

00002204 <_exit>:
    2204:	f8 94       	cli

00002206 <__stop_program>:
    2206:	ff cf       	rjmp	.-2      	; 0x2206 <__stop_program>
